// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 effective-4.1.50 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64e-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 4 -enforce-exclusivity=checked -Onone -module-name VideoKitCore
import AVFoundation
import CoreLocation
import Foundation
import Photos
import Swift
import SystemConfiguration
import UIKit
@_exported import VideoKitCore
@objc public class VKTagsPlaylist : VideoKitCore.VKFilteredPlaylist {
  public init(withTags tags: Swift.Set<Swift.String>, sortOrder: VideoKitCore.VKSortOrder = .asc)
  @objc deinit
  override public init(withFilter filter: VideoKitCore.VKVideoFilter, sortOrder: VideoKitCore.VKSortOrder = super)
}
@objc public class VKCustomPlaylist : VideoKitCore.VKPlaylist {
  public init(videoIds: [Swift.String])
  public func add(videos: [VideoKitCore.VKVideo], at index: Swift.Int? = nil)
  public func add(video: VideoKitCore.VKVideo, at index: Swift.Int? = nil)
  public func add(videoIds: [Swift.String], at index: Swift.Int? = nil)
  public func add(videoId: Swift.String, at index: Swift.Int? = nil)
  public func remove(videoIds ids: [Swift.String])
  public func remove(videoId id: Swift.String)
  @objc deinit
  @objc override dynamic public init()
  override public init(videos: [VideoKitCore.VKVideo])
}
@_hasMissingDesignatedInitializers @objc public class VKVideosResponse : ObjectiveC.NSObject {
  final public let videos: [VideoKitCore.VKVideo]
  final public let totalCount: Swift.Int
  @objc deinit
  @objc override dynamic public init()
}
@objc public enum VKStreamProfile : Swift.Int, Swift.Codable {
  case lowLatency
  case ultraLowLatency
  public static func encode(withString string: Swift.String) -> VideoKitCore.VKStreamProfile?
  public func name() -> Swift.String
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum VKStreamPlayback : Swift.String, Swift.Codable {
  case hls
  case dash
  case webrtc
  case mp4
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum VKStreamInput : Swift.String, Swift.Codable {
  case url
  case type
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum VKStreamState : Swift.Int, Swift.Codable {
  case unknown
  case ready
  case failed
  case preview
  case recording
  case recorded
  case finished
  case paused
  case preparing
  case live
  case all
  public static func encode(withString string: Swift.String) -> VideoKitCore.VKStreamState?
  public func name() -> Swift.String
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class VKStream : ObjectiveC.NSObject, Swift.Codable {
  public var id: Swift.String
  public var type: Swift.String
  public var profile: VideoKitCore.VKStreamProfile
  public var state: VideoKitCore.VKStreamState
  public var playbackUrl: [VideoKitCore.VKStreamPlayback : Foundation.URL]
  public var input: [VideoKitCore.VKStreamInput : Swift.String]
  public var createdAt: Foundation.Date
  public var updatedAt: Foundation.Date
  public func getPlaybackUrl() -> Foundation.URL?
  public static func == (lhs: VideoKitCore.VKStream, rhs: VideoKitCore.VKStream) -> Swift.Bool
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers @objc public class VKVideoResponse : ObjectiveC.NSObject {
  final public let video: VideoKitCore.VKVideo
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VKNotificationsManager : ObjectiveC.NSObject {
  public static var sharedInstance: VideoKitCore.VKNotificationsManager
  public var request: Foundation.URLRequest? {
    get
  }
  public var isConnected: Swift.Bool {
    get
  }
  @objc deinit
}
extension VKNotificationsManager : VideoKitCore.WebSocketDelegate {
  @objc dynamic public func webSocketOpen()
  @objc dynamic public func webSocketClose(_ code: Swift.Int, reason: Swift.String, wasClean: Swift.Bool)
  @objc dynamic public func webSocketError(_ error: Foundation.NSError)
  @objc dynamic public func webSocketMessageData(_ data: Foundation.Data)
  @objc dynamic public func webSocketMessageText(_ text: Swift.String)
}
extension Error {
  public var isOffline: Swift.Bool {
    get
  }
  public var timedOut: Swift.Bool {
    get
  }
  public var isAuthError: Swift.Bool {
    get
  }
  public var isNotFound: Swift.Bool {
    get
  }
  public var isRangeNotSatisfied: Swift.Bool {
    get
  }
  public var isQuotaError: Swift.Bool {
    get
  }
  public var isServerMaintenanceError: Swift.Bool {
    get
  }
  public var isTerminated: Swift.Bool {
    get
  }
  public var isServerDownError: Swift.Bool {
    get
  }
  public var isRetryError: Swift.Bool {
    get
  }
  public var isCancelled: Swift.Bool {
    get
  }
}
@objc extension NSError {
  @objc dynamic public var isOffline: Swift.Bool {
    @objc get
  }
  @objc dynamic public var timedOut: Swift.Bool {
    @objc get
  }
  @objc dynamic public var isAuthError: Swift.Bool {
    @objc get
  }
  @objc dynamic public var isNotFound: Swift.Bool {
    @objc get
  }
  @objc dynamic public var isRangeNotSatisfied: Swift.Bool {
    @objc get
  }
  @objc dynamic public var isQuotaError: Swift.Bool {
    @objc get
  }
  @objc dynamic public var isServerMaintenanceError: Swift.Bool {
    @objc get
  }
  @objc dynamic public var isTerminated: Swift.Bool {
    @objc get
  }
  @objc dynamic public var isServerDownError: Swift.Bool {
    @objc get
  }
  @objc dynamic public var isRetryError: Swift.Bool {
    @objc get
  }
  @objc dynamic public var isCancelled: Swift.Bool {
    @objc get
  }
}
@_hasMissingDesignatedInitializers public class VKDownloader {
  open class func firstTwoBitesAndSize(of url: Foundation.URL, completion: @escaping (Foundation.Data?, Swift.Int, Swift.Error?) -> ()) -> VideoKitCore.VKCancellable
  public class func data(of url: Foundation.URL, with range: Foundation.NSRange, dataBlock: @escaping (Foundation.Data, Swift.Int) -> (), completion: @escaping (Swift.Int, Swift.Error?) -> ()) -> VideoKitCore.VKCancellable
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class VKVideoCache : ObjectiveC.NSObject {
  @objc public static var shared: VideoKitCore.VKVideoCache
  public var cache: [Swift.String : VideoKitCore.VKVideo]
  @objc open func didReceiveMemoryWarning()
  @objc deinit
  @objc public func getVideo(_ id: Swift.String, _ completion: @escaping (VideoKitCore.VKVideo?, Swift.Error?) -> Swift.Void) -> VideoKitCore.VKCancellable?
  @objc public func getVideos(_ ids: [Swift.String], _ completion: @escaping ([VideoKitCore.VKVideo]) -> Swift.Void) -> VideoKitCore.VKCancellable?
  @objc public func getCachedVideo(_ id: Swift.String) -> VideoKitCore.VKVideo?
  @objc public func getCachedVideos(_ ids: [Swift.String]) -> [VideoKitCore.VKVideo]
  @objc public func putVideoToCache(video: VideoKitCore.VKVideo)
  @objc public func putVideosToCache(videos: [VideoKitCore.VKVideo])
}
@_hasMissingDesignatedInitializers public class VKThroughputManager {
  public static var shared: VideoKitCore.VKThroughputManager
  public var bandwidth: Swift.Double {
    get
  }
  public var resolution: VideoKitCore.VKVideoResolution {
    get
  }
  @objc deinit
}
@objc public class VKMetadataPlaylist : VideoKitCore.VKFilteredPlaylist {
  public init(withMetadata metadata: [Swift.String : Swift.String], sortOrder: VideoKitCore.VKSortOrder = .asc)
  @objc deinit
  override public init(withFilter filter: VideoKitCore.VKVideoFilter, sortOrder: VideoKitCore.VKSortOrder = super)
}
@_hasMissingDesignatedInitializers @objc public class VKUpload : ObjectiveC.NSObject {
  public var videoID: Swift.String
  public var thumb: VideoKitCore.VKImage?
  public var progress: Swift.Float
  public var isCompressed: Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class VKUploads : ObjectiveC.NSObject {
  @objc public static var shared: VideoKitCore.VKUploads
  @objc public var uploads: [VideoKitCore.VKUpload]
  public func upload(usingFileUrl url: Foundation.URL, withTitle title: Swift.String?, withTags tags: Swift.Set<Swift.String>?, withMetadata metadata: [Swift.String : Swift.String]?, completion: @escaping VideoKitCore.VKVideoRequestBlock)
  public func cancelUpload(videoID: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class VKLocalVideoCache : ObjectiveC.NSObject {
  @objc public static var shared: VideoKitCore.VKLocalVideoCache
  public func resetCache()
  public func videoLocalMediaURL(by videoID: Swift.String) -> Foundation.URL?
  public func video(by videoID: Swift.String) -> VideoKitCore.VKVideo?
  @objc public func put(videoObject: VideoKitCore.VKVideo, fromObject: Swift.AnyObject)
  public func videos(byTags tags: Swift.Set<Swift.String>, andMetadata metadata: [Swift.String : Swift.String]) -> [VideoKitCore.VKVideo]
  public func resolutions(for videoID: Swift.String) -> [Swift.String]
  public func pathsForVideoCache(for videoID: Swift.String) -> [Foundation.URL]
  public func pathForCache(videoID: Swift.String, resolution: Swift.String) -> Foundation.URL
  public func pathForMOVVideoCache(videoID: Swift.String) -> Foundation.URL
  @objc public func remove(videoID: Swift.String)
  @objc deinit
}
public typealias VKImage = UIKit.UIImage
public typealias ImageLoadingCallbackType = (VideoKitCore.VKImage?) -> Swift.Void
@objc public enum VKPlaylistUpdateType : Swift.Int {
  case Update
  case Reset
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol VKPlaylistDelegate : AnyObject {
  @objc optional func loaded(videos: [VideoKitCore.VKVideo])
  @objc optional func updated(updatedIndexes: [Swift.Int], type: VideoKitCore.VKPlaylistUpdateType)
}
public struct WebSocketEvents {
  public var open: () -> ()
  public var close: (Swift.Int, Swift.String, Swift.Bool) -> ()
  public var error: (Swift.Error) -> ()
  public var message: (Any) -> ()
  public var pong: (Any) -> ()
  public var end: (Swift.Int, Swift.String, Swift.Bool, Swift.Error?) -> ()
}
public enum WebSocketBinaryType : Swift.CustomStringConvertible {
  case uInt8Array
  case nsData
  case uInt8UnsafeBufferPointer
  public var description: Swift.String {
    get
  }
  public static func == (a: VideoKitCore.WebSocketBinaryType, b: VideoKitCore.WebSocketBinaryType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public enum WebSocketReadyState : Swift.Int, Swift.CustomStringConvertible {
  case connecting = 0
  case open = 1
  case closing = 2
  case closed = 3
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct WebSocketCompression {
  public var on: Swift.Bool
  public var noContextTakeover: Swift.Bool
  public var maxWindowBits: Swift.Int
}
public struct WebSocketService : Swift.OptionSet {
  public typealias RawValue = Swift.UInt
  public init(rawValue value: Swift.UInt)
  public init(nilLiteral: ())
  public static var allZeros: VideoKitCore.WebSocketService {
    get
  }
  public var rawValue: Swift.UInt {
    get
  }
  public static var None: VideoKitCore.WebSocketService {
    get
  }
  public static var VoIP: VideoKitCore.WebSocketService {
    get
  }
  public static var Video: VideoKitCore.WebSocketService {
    get
  }
  public static var Background: VideoKitCore.WebSocketService {
    get
  }
  public static var Voice: VideoKitCore.WebSocketService {
    get
  }
  public typealias Element = VideoKitCore.WebSocketService
  public typealias ArrayLiteralElement = VideoKitCore.WebSocketService
}
public enum WebSocketError : Swift.Error, Swift.CustomStringConvertible {
  case memory
  case needMoreInput
  case invalidHeader
  case invalidAddress
  case network(Swift.String)
  case libraryError(Swift.String)
  case payloadError(Swift.String)
  case protocolError(Swift.String)
  case invalidResponse(Swift.String)
  case invalidCompressionOptions(Swift.String)
  public var description: Swift.String {
    get
  }
  public var details: Swift.String {
    get
  }
}
@objc public protocol WebSocketDelegate {
  @objc func webSocketOpen()
  @objc func webSocketClose(_ code: Swift.Int, reason: Swift.String, wasClean: Swift.Bool)
  @objc func webSocketError(_ error: Foundation.NSError)
  @objc optional func webSocketMessageText(_ text: Swift.String)
  @objc optional func webSocketMessageData(_ data: Foundation.Data)
  @objc optional func webSocketPong()
  @objc optional func webSocketEnd(_ code: Swift.Int, reason: Swift.String, wasClean: Swift.Bool, error: Foundation.NSError?)
}
@objc @_inheritsConvenienceInitializers @objcMembers open class WebSocket : ObjectiveC.NSObject {
  @objc override dynamic open var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic open func isEqual(_ other: Any?) -> Swift.Bool
  @objc public convenience init(_ url: Swift.String)
  @objc public convenience init(url: Foundation.URL)
  @objc public convenience init(_ url: Swift.String, subProtocols: [Swift.String])
  @objc public convenience init(_ url: Swift.String, subProtocol: Swift.String)
  @objc public init(request: Foundation.URLRequest, subProtocols: [Swift.String] = [])
  @objc override dynamic public convenience init()
  @objc open var url: Swift.String {
    @objc get
  }
  @objc open var subProtocol: Swift.String {
    @objc get
  }
  open var compression: VideoKitCore.WebSocketCompression {
    get
    set(newValue)
  }
  @objc open var allowSelfSignedSSL: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  open var services: VideoKitCore.WebSocketService {
    get
    set(newValue)
  }
  open var event: VideoKitCore.WebSocketEvents {
    get
    set(newValue)
  }
  @objc open var eventQueue: Dispatch.DispatchQueue? {
    @objc get
    @objc set(newValue)
  }
  open var binaryType: VideoKitCore.WebSocketBinaryType {
    get
    set(newValue)
  }
  @objc open var readyState: VideoKitCore.WebSocketReadyState {
    @objc get
  }
  @objc open func open(_ url: Swift.String)
  @objc open func open(nsurl url: Foundation.URL)
  @objc open func open(_ url: Swift.String, subProtocols: [Swift.String])
  @objc open func open(_ url: Swift.String, subProtocol: Swift.String)
  @objc open func open(request: Foundation.URLRequest, subProtocols: [Swift.String] = [])
  @objc open func open()
  @objc open func close(_ code: Swift.Int = 1000, reason: Swift.String = "Normal Closure")
  @objc open func send(_ message: Any)
  @objc open func ping(_ message: Any)
  @objc open func ping()
  @objc deinit
}
public func == (lhs: VideoKitCore.WebSocket, rhs: VideoKitCore.WebSocket) -> Swift.Bool
extension WebSocket {
  @objc dynamic public var delegate: VideoKitCore.WebSocketDelegate? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public func send(text: Swift.String)
  @objc dynamic public func send(data: Foundation.Data)
}
public enum ReachabilityError : Swift.Error {
  case FailedToCreateWithAddress(Darwin.sockaddr_in)
  case FailedToCreateWithHostname(Swift.String)
  case UnableToSetCallback
  case UnableToSetDispatchQueue
}
public var ReachabilityChangedNotification: Foundation.NSNotification.Name
public class Reachability {
  public typealias NetworkReachable = (VideoKitCore.Reachability) -> ()
  public typealias NetworkUnreachable = (VideoKitCore.Reachability) -> ()
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable
    case reachableViaWiFi
    case reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: VideoKitCore.Reachability.NetworkStatus, b: VideoKitCore.Reachability.NetworkStatus) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var whenReachable: VideoKitCore.Reachability.NetworkReachable?
  public var whenUnreachable: VideoKitCore.Reachability.NetworkUnreachable?
  public var reachableOnWWAN: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  public var currentReachabilityString: Swift.String {
    get
  }
  public var currentReachabilityStatus: VideoKitCore.Reachability.NetworkStatus {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability)
  public convenience init?(hostname: Swift.String)
  public convenience init?()
  @objc deinit
}
extension Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  public var isReachable: Swift.Bool {
    get
  }
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
public enum VKSortOrder : Swift.String {
  case asc
  case desc
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc open class VKUploadingState : ObjectiveC.NSObject {
  @objc final public let videoID: Swift.String
  @objc final public let metadata: [Swift.String : Swift.String]
  @objc final public let tags: Swift.Set<Swift.String>
  @objc final public let height: Swift.Int
  @objc final public let width: Swift.Int
  @objc final public let latitude: Swift.Double
  @objc final public let longitude: Swift.Double
  @objc final public let title: Swift.String
  @objc final public let descr: Swift.String
  @objc final public let shotOn: Foundation.Date
  @objc final public let resolutionsToUpload: [Swift.String]
  @objc open var createdAt: Foundation.Date
  @objc open var resolutionsUploaded: [Swift.String]
  @objc open var urlToUpload: Foundation.URL?
  @objc open var urlExpirationDate: Foundation.Date?
  @objc open var isRecordingComplete: Swift.Bool
  @objc open var bytesUploaded: Swift.Int
  @objc open var isUploaded: Swift.Bool
  @objc open var isSynced: Swift.Bool
  @objc open var isConverted: Swift.Bool
  @objc open var isImported: Swift.Bool
  @objc open class func initWithVideo(video: VideoKitCore.VKVideo) -> VideoKitCore.VKUploadingState
  @objc open class func internalObjCInit(videoID: Swift.String, tags: Swift.Set<Swift.String>, metadata: [Swift.String : Swift.String], width: Swift.Int, height: Swift.Int, latitude: Swift.Double, longitude: Swift.Double, title: Swift.String, descr: Swift.String, shotOn: Foundation.Date, createdAt: Foundation.Date, resolutionsToUpload: [Swift.String], resolutionsUploaded: [Swift.String], isRecordingComplete: Swift.Bool, bytesUploaded: Swift.Int, isUploaded: Swift.Bool, isSynced: Swift.Bool, isConverted: Swift.Bool, isImported: Swift.Bool) -> VideoKitCore.VKUploadingState
  @objc open func bytes(for resolution: Swift.String) -> Swift.Int
  @objc open func bytes(forFile file: Foundation.URL) -> Swift.Int
  @objc open var totalBytesToUpload: Swift.Int {
    @objc get
  }
  @objc open var requireConvert: Swift.Bool {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
public enum VKLoggerType : Swift.String {
  case PLR
  case PLRV
  case PLMNG
  case PLST
  case PLCH
  case RQST
  case VDSR
  case VDLD
  case THRP
  case NTFS
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public class VKLogger {
  public static var activeLogs: Swift.Set<VideoKitCore.VKLoggerType>
  public init(type: VideoKitCore.VKLoggerType)
  public func addPrefix(_ prefix: Swift.String)
  public func removePreffix()
  public func log(_ message: Swift.String)
  @objc deinit
}
public typealias VKSessionStartCompletion = ((VideoKitCore.VKSessionState, VideoKitCore.VKSessionResponseDictonary, Swift.Error?) -> Swift.Void)
@objc public enum VKSessionState : Swift.Int {
  case connected
  case connecting
  case disconnected
  case error
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class VKSession : ObjectiveC.NSObject {
  @objc public static var current: VideoKitCore.VKSession
  @objc public var sessionToken: Swift.String?
  @objc public var apiToken: Swift.String?
  @objc public var secureModeEnabled: Swift.Bool
  @objc public var appID: Swift.String?
  @objc public var accountId: Swift.String?
  @objc public var expiresAt: Foundation.Date?
  @objc public var createdAt: Foundation.Date?
  @objc public var identity: Swift.String
  @objc public var state: VideoKitCore.VKSessionState {
    @objc get
  }
  @objc public var error: Swift.Error? {
    get
  }
  @objc public func start(apiToken: Swift.String, identity: Swift.String, completion: VideoKitCore.VKSessionStartCompletion?)
  @objc public func start(sessionToken: Swift.String)
  @available(*, deprecated, renamed: "start")
  @objc public func startSession(completion: ((VideoKitCore.VKSessionState, Swift.Error?) -> Swift.Void)?)
  @available(*, deprecated, renamed: "stop")
  @objc public func stopSession()
  @objc public func stop()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LoadImageSubscription : VideoKitCore.VKCancellable {
  @objc public func cancelIt()
  @objc deinit
}
extension LoadImageSubscription : Swift.Equatable {
  public static func == (lhs: VideoKitCore.LoadImageSubscription, rhs: VideoKitCore.LoadImageSubscription) -> Swift.Bool
}
@available(*, deprecated, renamed: "VKSessionStartCompletion")
public typealias VKStartSessionCompletionBlockDeprecated = (VideoKitCore.VKSessionState, Swift.Error?) -> Swift.Void
extension VKVideos {
  @available(*, deprecated, renamed: "get")
  public func getVideos(withTags tags: Swift.Set<Swift.String>, withMetadata metadata: [Swift.String : Swift.String], withOrder order: Swift.Bool = true, completion: @escaping VideoKitCore.VKPlaylistRequestBlock)
  @available(*, deprecated, renamed: "get")
  public func video(By videoID: Swift.String, completion: @escaping VideoKitCore.VKVideoRequestBlock)
  @available(*, deprecated, renamed: "delete")
  public func remove(_ video: VideoKitCore.VKVideo, completion: @escaping () -> (Swift.Bool))
  @available(*, deprecated, renamed: "VKUploads.upload")
  public func uploadVideo(file url: Foundation.URL, withTitle title: Swift.String?, withTags tags: Swift.Set<Swift.String>?, withMetadata metadata: [Swift.String : Swift.String]?, completion: @escaping VideoKitCore.VKVideoRequestBlock)
}
extension VKLegacyPlaylist {
  @available(*, deprecated, renamed: "videoAt")
  public func itemAtIndex(_ index: Swift.Int, completion: @escaping ((VideoKitCore.VKVideo?, Swift.Error?) -> Swift.Void)) -> VideoKitCore.VKCancellable
  @available(*, deprecated, renamed: "cachedVideoAt")
  public func itemAtIndexCached(_ index: Swift.Int) -> VideoKitCore.VKVideo?
}
@objc @_inheritsConvenienceInitializers open class VKFileSystemHelper : ObjectiveC.NSObject {
  public class func fileSize(forUrl url: Foundation.URL) -> Swift.Int
  public class func directorySize(forUrl url: Foundation.URL) -> Swift.Int
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SWIFTVKTokenObject) open class VKTokenObject : ObjectiveC.NSObject {
  @objc public static var sharedInstance: VideoKitCore.VKTokenObject
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class VKVideoAPI : ObjectiveC.NSObject {
  @objc public static var shared: VideoKitCore.VKVideoAPI
  @objc public func video(by videoID: Swift.String, completion: @escaping VideoKitCore.VKVideoRequestCompletionBlock) -> VideoKitCore.VKCancellable
  @objc public func videosCount(byTags tags: Swift.Set<Swift.String>, metadata: [Swift.String : Swift.String], completion: @escaping VideoKitCore.VKVideosCountRequestCompletionBlock) -> VideoKitCore.VKCancellable
  @objc public func videos(byFilter filter: VideoKitCore.VKVideoFilter, sortOrder: Swift.String = "asc", completion: @escaping VideoKitCore.VKVideosRequestCompletionBlock) -> VideoKitCore.VKCancellable
  @objc public func videos(byTags tags: Swift.Set<Swift.String> = [], metadata: [Swift.String : Swift.String] = [:], page: Swift.Int = 1, perPage: Swift.Int = 20, sortOrder: Swift.String = "asc", completion: @escaping VideoKitCore.VKVideosRequestCompletionBlock) -> VideoKitCore.VKCancellable
  @objc public func videos(byIdentity identity: Swift.String, page: Swift.Int = 1, perPage: Swift.Int = 20, sortOrder: Swift.String = "asc", completion: @escaping VideoKitCore.VKVideosRequestCompletionBlock) -> VideoKitCore.VKCancellable
  @objc public func videos(byIds ids: Swift.Array<Swift.String>, completion: @escaping VideoKitCore.VKVideosRequestCompletionBlock) -> VideoKitCore.VKCancellable
  @objc public func delete(by videoID: Swift.String, completion: @escaping VideoKitCore.VKRequestCompletionBlock) -> VideoKitCore.VKCancellable
  @objc public func syncVideos(with date: Foundation.Date, tags: Swift.Set<Swift.String>, metadata: [Swift.String : Swift.String], completion: @escaping VideoKitCore.VKRequestCompletionBlock) -> VideoKitCore.VKCancellable
  @objc public func updateVideo(by videoID: Swift.String, mp4Resolutions: [Swift.String], fromObject: Swift.AnyObject, completion: @escaping VideoKitCore.VKVideoRequestCompletionBlock) -> VideoKitCore.VKCancellable
  @objc public func updateVideo(by videoID: Swift.String, parameters: [Swift.String : Any], fromObject: Swift.AnyObject, completion: @escaping VideoKitCore.VKVideoRequestCompletionBlock) -> VideoKitCore.VKCancellable
  @objc public func createVideo(videoID: Swift.String, title: Swift.String, date: Foundation.Date, location: CoreLocation.CLLocation, height: Swift.Int, width: Swift.Int, tags: Swift.Set<Swift.String>, metadata: [Swift.String : Swift.String], fromObject: Swift.AnyObject, completion: @escaping VideoKitCore.VKVideoRequestCompletionBlock) -> VideoKitCore.VKCancellable
  @objc public func createVideo(title: Swift.String, date: Foundation.Date, location: CoreLocation.CLLocation, height: Swift.Int, width: Swift.Int, tags: Swift.Set<Swift.String>, metadata: [Swift.String : Swift.String], fromObject: Swift.AnyObject, completion: @escaping VideoKitCore.VKVideoRequestCompletionBlock) -> VideoKitCore.VKCancellable
  @objc public func startConvertingVideo(by videoID: Swift.String, mediaPath: Swift.String, fromObject: Swift.AnyObject, completion: @escaping VideoKitCore.VKRequestCompletionBlock) -> VideoKitCore.VKCancellable
  @objc public func uploadingURLs(for videoID: Swift.String, isImported: Swift.Bool, fromObject: Any, completion: @escaping VideoKitCore.VKRequestCompletionBlock) -> VideoKitCore.VKCancellable
  @objc deinit
}
@objc public enum VKError : Swift.Int, Swift.Error, Foundation.CustomNSError {
  case isOffline
  case sessionNotStarted
  case unableToAuthenticate
  case networkTimeout
  case serverDown
  case dataOverflow
  case quotaReached
  case serverMaintenance
  case playlistOutOfBound
  case videoIsUnavailable
  case videoIsUnreachable
  case videoIsNotFound
  case videoIsNotPlayable
  case fileIsNotFound
  case incorrectFileType
  case unknownError
  public var localizedDescription: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
  public static var errorDomain: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public static var _nsErrorDomain: Swift.String {
    get
  }
}
@objc public class VKFilteredPlaylist : VideoKitCore.VKPlaylist {
  public var filter: VideoKitCore.VKVideoFilter {
    get
  }
  public init(withFilter filter: VideoKitCore.VKVideoFilter, sortOrder: VideoKitCore.VKSortOrder = .asc)
  override public func reset()
  public func loadNextVideos()
  @objc deinit
  @objc override dynamic public init()
  override public init(videos: [VideoKitCore.VKVideo])
}
public typealias VKSessionResponseDictonary = [Swift.String : Any]
public typealias VKSessionCompletionBlock = (VideoKitCore.VKSessionResponseDictonary, Swift.Error?) -> Swift.Void
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class VKSessionAPI : ObjectiveC.NSObject {
  @objc public static var shared: VideoKitCore.VKSessionAPI
  @objc public func session(identity: Swift.String, completion: @escaping VideoKitCore.VKSessionCompletionBlock) -> VideoKitCore.VKCancellable
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class VKUploadingStateManager : ObjectiveC.NSObject {
  @objc public static var shared: VideoKitCore.VKUploadingStateManager
  @objc open func recorded() -> [VideoKitCore.VKUploadingState]
  @objc open func recordedButNotUploaded(fromObject: Swift.AnyObject) -> [VideoKitCore.VKUploadingState]
  @objc open func notRecorded() -> [VideoKitCore.VKUploadingState]
  @objc open func uploaded() -> [VideoKitCore.VKUploadingState]
  @objc open func remove(videoIDs: [Swift.String], fromObject: Swift.AnyObject)
  @objc open func removeUploading(by videoID: Swift.String, fromObject: Swift.AnyObject)
  @objc open func cancelUploading(by videoID: Swift.String, fromObject: Swift.AnyObject)
  @objc open func uploading(by videoID: Swift.String, fromObject: Swift.AnyObject) -> VideoKitCore.VKUploadingState?
  @objc open func put(uploading: VideoKitCore.VKUploadingState, fromObject: Swift.AnyObject)
  @objc open func confirmRecording(for videoID: Swift.String, fromObject: Swift.AnyObject)
  @objc open func markUploaded(for videoID: Swift.String, fromObject: Swift.AnyObject)
  @objc open func markSynced(for videoID: Swift.String, fromObject: Swift.AnyObject)
  @objc open func markConverted(for videoID: Swift.String, fromObject: Swift.AnyObject)
  @objc open func updateDataUploaded(for videoID: Swift.String, with bytesUploaded: Swift.Int, fromObject: Swift.AnyObject)
  @objc open func updateUploadingURL(for videoID: Swift.String, url: Foundation.URL?, expirationDate: Foundation.Date?, fromObject: Swift.AnyObject)
  @objc open func updateResolutionsUploaded(for videoID: Swift.String, with resolutionsUploaded: [Swift.String], fromObject: Swift.AnyObject)
  @objc open func resetUploadedBytes(for videoID: Swift.String, fromObject: Swift.AnyObject)
  @objc open func updateCreationDate(for videoID: Swift.String, date: Foundation.Date, fromObject: Swift.AnyObject)
  @objc deinit
}
extension URLSessionTask : VideoKitCore.VKCancellable {
  @objc dynamic public func cancelIt()
}
@available(*, deprecated, renamed: "VKPlaylistDelegate")
@objc public protocol VKLegacyPlaylistDelegate : AnyObject {
  @objc func updated(playlist: VideoKitCore.VKLegacyPlaylist, newIndexes: [Swift.Int], oldIndexes: [Swift.Int], newCount: Swift.Int, localVideo: Swift.Bool)
  @objc func updated(playlist: VideoKitCore.VKLegacyPlaylist, newIndexes: [Swift.Int], newCount: Swift.Int, atStart: Swift.Bool)
}
@available(*, deprecated, renamed: "VKVideo")
public typealias VKVideoObject = VideoKitCore.VKVideo
@available(*, deprecated, renamed: "VKSession")
public typealias VKAccount = VideoKitCore.VKSession
@available(*, deprecated, renamed: "VKPlaylist")
public typealias VKVideoPlaylist = VideoKitCore.VKLegacyPlaylist
@available(*, deprecated, renamed: "VKPlaylistDelegate")
public typealias VKVideoPlaylistDelegate = VideoKitCore.VKLegacyPlaylistDelegate
@available(*, deprecated, renamed: "VKPlaylistCancellationToken")
public typealias VKVideoPlaylistCancellationToken = VideoKitCore.VKPlaylistCancellationToken
@available(*, deprecated, renamed: "VKVideos")
public typealias VKVideoStore = VideoKitCore.VKVideos
@available(*, deprecated, renamed: "VKUploads")
public typealias VKVideoUpload = VideoKitCore.VKUploads
@objc public class VKUserPlaylist : VideoKitCore.VKFilteredPlaylist {
  public init(withUserIdentity identity: Swift.String, sortOrder: VideoKitCore.VKSortOrder = .asc)
  @objc deinit
  override public init(withFilter filter: VideoKitCore.VKVideoFilter, sortOrder: VideoKitCore.VKSortOrder = super)
}
@objc public protocol VKCancellable {
  @objc func cancelIt()
}
extension NSNotification.Name {
  public static var VKVideoCreated: Foundation.Notification.Name
  public static var VKVideoUpdated: Foundation.Notification.Name
  public static var VKVideoDeleted: Foundation.Notification.Name
  public static var VKLocalVideoCleanedUp: Foundation.Notification.Name
  public static var VKAccountStateChanged: Foundation.Notification.Name
  public static var VKVideoUploadProgress: Foundation.Notification.Name
  public static var VKVideoUploadComplete: Foundation.Notification.Name
  public static var VKVideoUploadFailed: Foundation.Notification.Name
  public static var VKVideoUploadCanceled: Foundation.Notification.Name
  public static var VKVideoIsUploaded: Foundation.Notification.Name
  public static var VKVideoUploadStarted: Foundation.Notification.Name
  public static var VKVideoIsRecordered: Foundation.Notification.Name
  public static var VKVideoRecordingFailed: Foundation.Notification.Name
  public static var VKPlaylistUpdated: Foundation.Notification.Name
  public static var VKPlayerUpdated: Foundation.Notification.Name
  public static var VKVideoPlaybackFailed: Foundation.Notification.Name
  public static var VKVideoDataCachingFinished: Foundation.Notification.Name
  public static var VKVideoUploadsUpdated: Foundation.Notification.Name
}
public typealias VKVideoItemCompletionBlock = (VideoKitCore.VKVideo?, Swift.Error?) -> Swift.Void
@_hasMissingDesignatedInitializers public class VKPlaylistCancellationToken : VideoKitCore.VKCancellable {
  @objc public func cancelIt()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class VKLegacyPlaylist : VideoKitCore.VKPlaylist {
  @objc dynamic public var internalCount: Swift.Int
  weak public var legacyDelegate: VideoKitCore.VKLegacyPlaylistDelegate?
  public var tags: Swift.Set<Swift.String> {
    get
  }
  public var metadata: [Swift.String : Swift.String] {
    get
  }
  public func asyncVideoAt(_ index: Swift.Int, completion: @escaping VideoKitCore.VKPlaylistVideoCompletion) -> VideoKitCore.VKCancellable
  override public func videoAt(_ index: Swift.Int) -> VideoKitCore.VKVideo?
  @objc deinit
  open func sync(completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc override dynamic public init()
  override public init(videos: [VideoKitCore.VKVideo])
}
@objc public enum VKVideoState : Swift.Int, Swift.RawRepresentable {
  case initializing
  case unknown
  case processing
  case processed
  case failed
  case all
  public typealias RawValue = Swift.String
  public var rawValue: VideoKitCore.VKVideoState.RawValue {
    get
  }
  public init?(rawValue: VideoKitCore.VKVideoState.RawValue)
}
@objc public enum VKVideoResolution : Swift.Int {
  case res1080p
  case res720p
  case res540p
  case res360p
  public static func fromString(_ string: Swift.String) -> VideoKitCore.VKVideoResolution?
  public static func fromURL(_ url: Foundation.URL) -> VideoKitCore.VKVideoResolution?
  public func toString() -> Swift.String
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class VKVideo : ObjectiveC.NSObject {
  @objc public var videoID: Swift.String {
    get
  }
  @objc public var tags: Swift.Set<Swift.String> {
    @objc get
  }
  @objc public var metadata: [Swift.String : Swift.String] {
    @objc get
  }
  @objc public var rating: Swift.Int {
    @objc get
  }
  @objc public func setMetadata(metadata: [Swift.String : Swift.String], reset: Swift.Bool = false)
  @objc public func isRated(identity: Swift.String? = nil) -> Swift.Bool
  @objc public func rate(identity: Swift.String? = nil, increment: Swift.Int = 1)
  @objc public var shareURL: Foundation.URL? {
    get
  }
  @objc public var location: CoreLocation.CLLocation? {
    get
  }
  @objc public var creationDate: Foundation.Date! {
    get
  }
  @objc public var shotOn: Foundation.Date! {
    get
  }
  @objc public var modifyDate: Foundation.Date! {
    get
  }
  @objc public var title: Swift.String {
    get
  }
  @objc public var videoDescription: Swift.String {
    get
  }
  @objc public var thumbnailImageURL: Foundation.URL? {
    get
  }
  @objc public var duration: Swift.Double {
    get
  }
  @objc public var height: Swift.Int {
    get
  }
  @objc public var width: Swift.Int {
    get
  }
  @objc public var state: VideoKitCore.VKVideoState {
    get
  }
  @objc public var transcription: Swift.String? {
    get
  }
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  public init(videoID: Swift.String, tags: Swift.Set<Swift.String>, metadata: [Swift.String : Swift.String], shareURL: Foundation.URL?, width: Swift.Int, height: Swift.Int, mediaMP4URL360p: Foundation.URL?, mediaMP4URL540p: Foundation.URL?, mediaMP4URL720p: Foundation.URL?, mediaHLSURL: Foundation.URL?, location: CoreLocation.CLLocation?, shotOn: Foundation.Date, creationDate: Foundation.Date!, modifyDate: Foundation.Date!, title: Swift.String, videoDescription: Swift.String, thumbnailImageURL: Foundation.URL?, duration: Foundation.TimeInterval, state: VideoKitCore.VKVideoState = .unknown, transcription: Swift.String? = nil)
  public func encode() -> [Swift.String : Any]
  public static func decode(data: [Swift.String : Any]) -> VideoKitCore.VKVideo?
  @objc deinit
  @objc override dynamic public init()
}
extension VKVideo {
  public func mp4URL(resolution: VideoKitCore.VKVideoResolution) -> Foundation.URL?
}
public typealias VKDeleteStreamCompletionBlock = ([Swift.String : Any], Swift.Error?) -> Swift.Void
public typealias VKStreamsCompletionBlock = (VideoKitCore.VKStream?, Swift.Error?) -> Swift.Void
public typealias VKListStreamsCompletionBlock = ([VideoKitCore.VKStream], Swift.Error?) -> Swift.Void
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class VKStreamsAPI : ObjectiveC.NSObject {
  @objc public static var shared: VideoKitCore.VKStreamsAPI
  @discardableResult
  @objc public func get(streamId id: Swift.String, completion: @escaping VideoKitCore.VKStreamsCompletionBlock) -> VideoKitCore.VKCancellable
  @discardableResult
  @objc public func list(withState state: VideoKitCore.VKStreamState, completion: @escaping VideoKitCore.VKListStreamsCompletionBlock) -> VideoKitCore.VKCancellable
  @discardableResult
  @objc public func create(withProfile profile: VideoKitCore.VKStreamProfile, completion: @escaping VideoKitCore.VKStreamsCompletionBlock) -> VideoKitCore.VKCancellable
  @discardableResult
  @objc public func delete(streamId id: Swift.String, completion: @escaping VideoKitCore.VKDeleteStreamCompletionBlock) -> VideoKitCore.VKCancellable
  @objc deinit
}
public typealias VKRequestDataStreamBlock = (Foundation.Data, Swift.Int) -> Swift.Void
public typealias VKRequestCompletionBlock = (Any?, Swift.Error?) -> Swift.Void
public typealias VKVideoRequestCompletionBlock = (VideoKitCore.VKVideo?, Swift.Error?) -> Swift.Void
public typealias VKVideosCountRequestCompletionBlock = (Swift.Int, Swift.Error?) -> Swift.Void
public typealias VKVideosRequestCompletionBlock = (VideoKitCore.VKVideosResponse?, Swift.Error?) -> Swift.Void
public typealias VKRequestSizeCompletionBlock = (Swift.Int, Swift.Error?) -> Swift.Void
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VKRequester : ObjectiveC.NSObject, Foundation.URLSessionDataDelegate, Foundation.URLSessionDelegate {
  public static var shared: VideoKitCore.VKRequester
  public func jsonRequest(url: Foundation.URL, method: Swift.String, parameters: [Swift.String : Any], headers: [Swift.String : Swift.String] = [:], mapper: ((Any, [Swift.AnyHashable : Any]?) -> Any)?, completion: @escaping VideoKitCore.VKRequestCompletionBlock) -> VideoKitCore.VKCancellable
  @objc public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  @objc public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class VKVideoFilter : ObjectiveC.NSObject {
  public var metadata: [Swift.String : Swift.String]
  public var tags: Swift.Set<Swift.String>
  public var title: Swift.String
  public var identity: Swift.String
  public var page: Swift.Int
  public var limit: Swift.Int
  @objc override dynamic public init()
  public init(withMetadata metadata: [Swift.String : Swift.String] = [:], tags: Swift.Set<Swift.String> = [], title: Swift.String = "", identity: Swift.String = "")
  @objc deinit
}
@_hasMissingDesignatedInitializers public class VKImagesLoader {
  public static var shared: VideoKitCore.VKImagesLoader
  public func thumbOfVideo(by url: Foundation.URL) -> VideoKitCore.VKImage?
  public func image(byURL url: Foundation.URL, callback: @escaping VideoKitCore.ImageLoadingCallbackType) -> VideoKitCore.LoadImageSubscription?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class VKUploadingStateToVKVideoMapper : ObjectiveC.NSObject {
  @objc open class func videoObject(byUploadingState uploadingState: VideoKitCore.VKUploadingState, fromObject: Swift.AnyObject) -> VideoKitCore.VKVideo
  @objc deinit
  @objc override dynamic public init()
}
public typealias VKPlaylistVideoCompletion = ((VideoKitCore.VKVideo?, Swift.Error?) -> Swift.Void)
public protocol VKPlaylistProtocol {
  func videoAt(_ index: Swift.Int) -> VideoKitCore.VKVideo?
  func hasVideoAt(_ index: Swift.Int) -> Swift.Bool
  func reset()
}
@objc @_inheritsConvenienceInitializers public class VKPlaylist : ObjectiveC.NSObject, VideoKitCore.VKPlaylistProtocol {
  public var videos: [VideoKitCore.VKVideo] {
    get
  }
  public var count: Swift.Int {
    get
  }
  public var totalCount: Swift.Int? {
    get
  }
  weak public var delegate: VideoKitCore.VKPlaylistDelegate?
  @objc override dynamic public init()
  public init(videos: [VideoKitCore.VKVideo])
  public func reset()
  public func videoAt(_ index: Swift.Int) -> VideoKitCore.VKVideo?
  public func videoById(_ videoId: Swift.String) -> VideoKitCore.VKVideo?
  public func hasVideoAt(_ index: Swift.Int) -> Swift.Bool
  public func hasVideoById(_ videoId: Swift.String) -> Swift.Bool
  @objc deinit
}
public typealias VKPlaylistRequestBlock = (VideoKitCore.VKLegacyPlaylist?, Swift.Error?) -> Swift.Void
public typealias VKVideoRequestBlock = (VideoKitCore.VKVideo?, Swift.Error?) -> Swift.Void
public typealias VKVideosRequestBlock = (VideoKitCore.VKVideosResponse?, Swift.Error?) -> Swift.Void
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class VKVideos : ObjectiveC.NSObject {
  public static var shared: VideoKitCore.VKVideos
  public func getPlaylist(withTags tags: Swift.Set<Swift.String>, withMetadata metadata: [Swift.String : Swift.String], withOrder order: Swift.Bool = true, completion: @escaping VideoKitCore.VKPlaylistRequestBlock)
  public func get(byFilter filter: VideoKitCore.VKVideoFilter, sortOrder: VideoKitCore.VKSortOrder, completion: @escaping VideoKitCore.VKVideosRequestBlock) -> VideoKitCore.VKCancellable
  public func get(byVideoId id: Swift.String, completion: @escaping VideoKitCore.VKVideoRequestBlock) -> VideoKitCore.VKCancellable
  public func get(byVideoIds ids: [Swift.String], completion: @escaping VideoKitCore.VKVideosRequestBlock) -> VideoKitCore.VKCancellable
  public func delete(_ video: VideoKitCore.VKVideo, completion: @escaping () -> (Swift.Bool)) -> VideoKitCore.VKCancellable
  public func delete(videoId id: Swift.String, completion: @escaping () -> (Swift.Bool)) -> VideoKitCore.VKCancellable
  public func update(videoId id: Swift.String, title: Swift.String?, tags: Swift.Set<Swift.String>?, metadata: [Swift.String : Swift.String]?, completion: @escaping VideoKitCore.VKRequestCompletionBlock) -> VideoKitCore.VKCancellable
  @objc deinit
}
