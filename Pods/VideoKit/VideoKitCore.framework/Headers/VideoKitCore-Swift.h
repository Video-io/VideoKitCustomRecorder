#if 0
#elif defined(__arm64e__) && __arm64e__
// Generated by Apple Swift version 5.3.2 effective-4.1.50 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef VIDEOKITCORE_SWIFT_H
#define VIDEOKITCORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="VideoKitCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


@interface NSError (SWIFT_EXTENSION(VideoKitCore))
@property (nonatomic, readonly) BOOL isOffline;
@property (nonatomic, readonly) BOOL timedOut;
@property (nonatomic, readonly) BOOL isAuthError;
@property (nonatomic, readonly) BOOL isNotFound;
@property (nonatomic, readonly) BOOL isRangeNotSatisfied;
@property (nonatomic, readonly) BOOL isQuotaError;
@property (nonatomic, readonly) BOOL isServerMaintenanceError;
@property (nonatomic, readonly) BOOL isTerminated;
@property (nonatomic, readonly) BOOL isServerDownError;
@property (nonatomic, readonly) BOOL isRetryError;
@property (nonatomic, readonly) BOOL isCancelled;
@end


SWIFT_PROTOCOL("_TtP12VideoKitCore13VKCancellable_")
@protocol VKCancellable
- (void)cancelIt;
@end


@interface NSURLSessionTask (SWIFT_EXTENSION(VideoKitCore)) <VKCancellable>
- (void)cancelIt;
@end



SWIFT_CLASS("_TtC12VideoKitCore10VKPlaylist")
@interface VKPlaylist : NSObject
/// Initialize empty playlist
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12VideoKitCore16VKCustomPlaylist")
@interface VKCustomPlaylist : VKPlaylist
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Defines the errors that comes from VKit.
typedef SWIFT_ENUM(NSInteger, VKError, open) {
/// No internet connection.
  VKErrorIsOffline = 0,
/// The session has not started.
  VKErrorSessionNotStarted = 1,
/// Authentication error occured.
  VKErrorUnableToAuthenticate = 2,
/// Network timed out.
  VKErrorNetworkTimeout = 3,
/// Server is currently down.
  VKErrorServerDown = 4,
/// The values in the data object being passed is too large. Please reduce.
  VKErrorDataOverflow = 5,
/// The quota has been reached.
  VKErrorQuotaReached = 6,
/// Server is currently under maintenance.
  VKErrorServerMaintenance = 7,
/// The video object being requested is out of bound.
  VKErrorPlaylistOutOfBound = 8,
/// The video file is unavailable
  VKErrorVideoIsUnavailable = 9,
/// The video object can’t be reached
  VKErrorVideoIsUnreachable = 10,
/// The video object is not found
  VKErrorVideoIsNotFound = 11,
/// The video object doesn’t have url to play
  VKErrorVideoIsNotPlayable = 12,
/// The video file to upload is not found
  VKErrorFileIsNotFound = 13,
/// Incorrect video file type for upload
  VKErrorIncorrectFileType = 14,
/// Unknown error.
  VKErrorUnknownError = 15,
};
static NSString * _Nonnull const VKErrorDomain = @"VideoKitCore.VKError";


SWIFT_CLASS("_TtC12VideoKitCore18VKFileSystemHelper")
@interface VKFileSystemHelper : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12VideoKitCore18VKFilteredPlaylist")
@interface VKFilteredPlaylist : VKPlaylist
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// This class represents a playlist of videos
SWIFT_CLASS("_TtC12VideoKitCore16VKLegacyPlaylist")
@interface VKLegacyPlaylist : VKPlaylist
@property (nonatomic) NSInteger internalCount;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL("_TtP12VideoKitCore24VKLegacyPlaylistDelegate_") SWIFT_DEPRECATED_MSG("", "_TtP12VideoKitCore18VKPlaylistDelegate_")
@protocol VKLegacyPlaylistDelegate
- (void)updatedWithPlaylist:(VKLegacyPlaylist * _Nonnull)playlist newIndexes:(NSArray<NSNumber *> * _Nonnull)newIndexes oldIndexes:(NSArray<NSNumber *> * _Nonnull)oldIndexes newCount:(NSInteger)newCount localVideo:(BOOL)localVideo;
- (void)updatedWithPlaylist:(VKLegacyPlaylist * _Nonnull)playlist newIndexes:(NSArray<NSNumber *> * _Nonnull)newIndexes newCount:(NSInteger)newCount atStart:(BOOL)atStart;
@end

@class VKVideo;

SWIFT_CLASS("_TtC12VideoKitCore17VKLocalVideoCache")
@interface VKLocalVideoCache : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VKLocalVideoCache * _Nonnull shared;)
+ (VKLocalVideoCache * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (void)putWithVideoObject:(VKVideo * _Nonnull)videoObject fromObject:(id _Nonnull)fromObject;
- (void)removeWithVideoID:(NSString * _Nonnull)videoID;
@end


SWIFT_CLASS("_TtC12VideoKitCore18VKMetadataPlaylist")
@interface VKMetadataPlaylist : VKFilteredPlaylist
@end


SWIFT_CLASS("_TtC12VideoKitCore22VKNotificationsManager")
@interface VKNotificationsManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// WebSocketDelegate is an Objective-C alternative to WebSocketEvents and is used to delegate the events for the WebSocket connection.
SWIFT_PROTOCOL("_TtP12VideoKitCore17WebSocketDelegate_")
@protocol WebSocketDelegate
/// A function to be called when the WebSocket connection’s readyState changes to .Open; this indicates that the connection is ready to send and receive data.
- (void)webSocketOpen;
/// A function to be called when the WebSocket connection’s readyState changes to .Closed.
- (void)webSocketClose:(NSInteger)code reason:(NSString * _Nonnull)reason wasClean:(BOOL)wasClean;
/// A function to be called when an error occurs.
- (void)webSocketError:(NSError * _Nonnull)error;
@optional
/// A function to be called when a message (string) is received from the server.
- (void)webSocketMessageText:(NSString * _Nonnull)text;
/// A function to be called when a message (binary) is received from the server.
- (void)webSocketMessageData:(NSData * _Nonnull)data;
/// A function to be called when a pong is received from the server.
- (void)webSocketPong;
/// A function to be called when the WebSocket process has ended; this event is guarenteed to be called once and can be used as an alternative to the “close” or “error” events.
- (void)webSocketEnd:(NSInteger)code reason:(NSString * _Nonnull)reason wasClean:(BOOL)wasClean error:(NSError * _Nullable)error;
@end


@interface VKNotificationsManager (SWIFT_EXTENSION(VideoKitCore)) <WebSocketDelegate>
- (void)webSocketOpen;
- (void)webSocketClose:(NSInteger)code reason:(NSString * _Nonnull)reason wasClean:(BOOL)wasClean;
- (void)webSocketError:(NSError * _Nonnull)error;
- (void)webSocketMessageData:(NSData * _Nonnull)data;
- (void)webSocketMessageText:(NSString * _Nonnull)text;
@end


enum VKPlaylistUpdateType : NSInteger;

SWIFT_PROTOCOL("_TtP12VideoKitCore18VKPlaylistDelegate_")
@protocol VKPlaylistDelegate
@optional
/// Called after new videos where loaded from the video.io backend
- (void)loadedWithVideos:(NSArray<VKVideo *> * _Nonnull)videos;
/// Called after playlist has been updated
- (void)updatedWithUpdatedIndexes:(NSArray<NSNumber *> * _Nonnull)updatedIndexes type:(enum VKPlaylistUpdateType)type;
@end

typedef SWIFT_ENUM(NSInteger, VKPlaylistUpdateType, open) {
/// Playlist has been updated (new videos added or removed)
  VKPlaylistUpdateTypeUpdate = 0,
/// Playlist was reset
  VKPlaylistUpdateTypeReset = 1,
};

@class NSURLSession;
@class NSURLSessionDataTask;
@class NSURLResponse;

SWIFT_CLASS("_TtC12VideoKitCore11VKRequester")
@interface VKRequester : NSObject <NSURLSessionDataDelegate>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveResponse:(NSURLResponse * _Nonnull)response completionHandler:(void (^ _Nonnull)(NSURLSessionResponseDisposition))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveData:(NSData * _Nonnull)data;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
@end

enum VKSessionState : NSInteger;

/// This class provides access to the account
SWIFT_CLASS("_TtC12VideoKitCore9VKSession")
@interface VKSession : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VKSession * _Nonnull current;)
+ (VKSession * _Nonnull)current SWIFT_WARN_UNUSED_RESULT;
/// The session token that is assigned to you by your backend (e.g. https://github.com/Video-io/vkit-nodejs)
@property (nonatomic, copy) NSString * _Nullable sessionToken;
/// The API token is assigned to you by http://panel.video.io/app-settings
@property (nonatomic, copy) NSString * _Nullable apiToken;
/// Allows client to start session using appSecretToken. Be careful only for testing purposes.
@property (nonatomic) BOOL secureModeEnabled;
/// The application id that is assigned to you
@property (nonatomic, copy) NSString * _Nullable appID;
/// Account id assigned by gateway.video.io
@property (nonatomic, copy) NSString * _Nullable accountId;
/// Session is going to expire at date
@property (nonatomic, copy) NSDate * _Nullable expiresAt;
/// Session created at Date
@property (nonatomic, copy) NSDate * _Nullable createdAt;
/// Identity for current session
@property (nonatomic, copy) NSString * _Nonnull identity;
/// This describes the current account state of the session.  A <code>VKNotificationConstants.AccountStateChanged</code> is sent when state are changed
@property (nonatomic, readonly) enum VKSessionState state;
/// This is the error that may have occured while trying to start a session.
/// This is not <code>nil</code> if <code>accountState == .Disconnected</code>
@property (nonatomic, readonly) NSError * _Nullable error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Starts a session using global app token (insecure)
- (void)startWithApiToken:(NSString * _Nonnull)apiToken identity:(NSString * _Nonnull)identity completion:(void (^ _Nullable)(enum VKSessionState, NSDictionary<NSString *, id> * _Nonnull, NSError * _Nullable))completion;
/// Starts the session. You could check on the state of session via <code>accountState</code>.
/// precondition:
/// Ensure <code>devToken</code> and <code>appID</code> are filled
- (void)startWithSessionToken:(NSString * _Nonnull)sessionToken;
- (void)startSessionWithCompletion:(void (^ _Nullable)(enum VKSessionState, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("", "start");
- (void)stopSession SWIFT_DEPRECATED_MSG("", "stop");
/// Stops the session. You could check on the state of the session via <code>accountState</code>
- (void)stop;
@end



SWIFT_CLASS("_TtC12VideoKitCore12VKSessionAPI")
@interface VKSessionAPI : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VKSessionAPI * _Nonnull shared;)
+ (VKSessionAPI * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (id <VKCancellable> _Nonnull)sessionWithIdentity:(NSString * _Nonnull)identity completion:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
@end

/// Current account state
typedef SWIFT_ENUM(NSInteger, VKSessionState, open) {
/// The session has started
  VKSessionStateConnected = 0,
/// Connecting to server
  VKSessionStateConnecting = 1,
/// Session has stopped
  VKSessionStateDisconnected = 2,
/// There was an error trying to connect to server. You should check VKAccount.error to see the description of the error
  VKSessionStateError = 3,
};


SWIFT_CLASS("_TtC12VideoKitCore8VKStream")
@interface VKStream : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, VKStreamProfile, open) {
  VKStreamProfileLowLatency = 0,
  VKStreamProfileUltraLowLatency = 1,
};

typedef SWIFT_ENUM(NSInteger, VKStreamState, open) {
  VKStreamStateUnknown = 0,
  VKStreamStateReady = 1,
  VKStreamStateFailed = 2,
  VKStreamStatePreview = 3,
  VKStreamStateRecording = 4,
  VKStreamStateRecorded = 5,
  VKStreamStateFinished = 6,
  VKStreamStatePaused = 7,
  VKStreamStatePreparing = 8,
  VKStreamStateLive = 9,
  VKStreamStateAll = 10,
};


SWIFT_CLASS("_TtC12VideoKitCore12VKStreamsAPI")
@interface VKStreamsAPI : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VKStreamsAPI * _Nonnull shared;)
+ (VKStreamsAPI * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Get a stream by id
/// Docs: https://docs.video.io/api/#tag/streams/paths/~1v1~1streams~1{id}/get
/// \param id String Stream ID
///
- (id <VKCancellable> _Nonnull)getWithStreamId:(NSString * _Nonnull)id completion:(void (^ _Nonnull)(VKStream * _Nullable, NSError * _Nullable))completion;
/// Get streams by state
/// Docs: http://gateway.video.io/documentation/index.html#/streams/get_v1_streams
/// \param id String Stream ID
///
- (id <VKCancellable> _Nonnull)listWithState:(enum VKStreamState)state completion:(void (^ _Nonnull)(NSArray<VKStream *> * _Nonnull, NSError * _Nullable))completion;
/// Get a stream by id
/// Docs: https://gateway.video.io/documentation/index.html#/streams/post_v1_streams
/// \param profile String Stream Profile
///
- (id <VKCancellable> _Nonnull)createWithProfile:(enum VKStreamProfile)profile completion:(void (^ _Nonnull)(VKStream * _Nullable, NSError * _Nullable))completion;
/// Delete an existing stream
/// Docs: https://gateway.video.io/documentation/index.html#/streams/delete_v1_streams__id_
/// \param id String Stream ID
///
- (id <VKCancellable> _Nonnull)deleteWithStreamId:(NSString * _Nonnull)id completion:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull, NSError * _Nullable))completion;
@end


SWIFT_CLASS("_TtC12VideoKitCore14VKTagsPlaylist")
@interface VKTagsPlaylist : VKFilteredPlaylist
@end


SWIFT_CLASS_NAMED("VKTokenObject")
@interface SWIFTVKTokenObject : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SWIFTVKTokenObject * _Nonnull sharedInstance;)
+ (SWIFTVKTokenObject * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12VideoKitCore8VKUpload")
@interface VKUpload : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12VideoKitCore16VKUploadingState")
@interface VKUploadingState : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull videoID;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull metadata;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull tags;
@property (nonatomic, readonly) NSInteger height;
@property (nonatomic, readonly) NSInteger width;
@property (nonatomic, readonly) double latitude;
@property (nonatomic, readonly) double longitude;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSString * _Nonnull descr;
@property (nonatomic, readonly, copy) NSDate * _Nonnull shotOn;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull resolutionsToUpload;
@property (nonatomic, copy) NSDate * _Nonnull createdAt;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull resolutionsUploaded;
@property (nonatomic, copy) NSURL * _Nullable urlToUpload;
@property (nonatomic, copy) NSDate * _Nullable urlExpirationDate;
@property (nonatomic) BOOL isRecordingComplete;
@property (nonatomic) NSInteger bytesUploaded;
@property (nonatomic) BOOL isUploaded;
@property (nonatomic) BOOL isSynced;
@property (nonatomic) BOOL isConverted;
@property (nonatomic) BOOL isImported;
+ (VKUploadingState * _Nonnull)initWithVideoWithVideo:(VKVideo * _Nonnull)video SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
+ (VKUploadingState * _Nonnull)internalObjCInitWithVideoID:(NSString * _Nonnull)videoID tags:(NSSet<NSString *> * _Nonnull)tags metadata:(NSDictionary<NSString *, NSString *> * _Nonnull)metadata width:(NSInteger)width height:(NSInteger)height latitude:(double)latitude longitude:(double)longitude title:(NSString * _Nonnull)title descr:(NSString * _Nonnull)descr shotOn:(NSDate * _Nonnull)shotOn createdAt:(NSDate * _Nonnull)createdAt resolutionsToUpload:(NSArray<NSString *> * _Nonnull)resolutionsToUpload resolutionsUploaded:(NSArray<NSString *> * _Nonnull)resolutionsUploaded isRecordingComplete:(BOOL)isRecordingComplete bytesUploaded:(NSInteger)bytesUploaded isUploaded:(BOOL)isUploaded isSynced:(BOOL)isSynced isConverted:(BOOL)isConverted isImported:(BOOL)isImported SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)bytesFor:(NSString * _Nonnull)resolution SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)bytesForFile:(NSURL * _Nonnull)file SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSInteger totalBytesToUpload;
@property (nonatomic, readonly) BOOL requireConvert;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12VideoKitCore23VKUploadingStateManager")
@interface VKUploadingStateManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VKUploadingStateManager * _Nonnull shared;)
+ (VKUploadingStateManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (NSArray<VKUploadingState *> * _Nonnull)recorded SWIFT_WARN_UNUSED_RESULT;
- (NSArray<VKUploadingState *> * _Nonnull)recordedButNotUploadedFromObject:(id _Nonnull)fromObject SWIFT_WARN_UNUSED_RESULT;
- (NSArray<VKUploadingState *> * _Nonnull)notRecorded SWIFT_WARN_UNUSED_RESULT;
- (NSArray<VKUploadingState *> * _Nonnull)uploaded SWIFT_WARN_UNUSED_RESULT;
- (void)removeWithVideoIDs:(NSArray<NSString *> * _Nonnull)videoIDs fromObject:(id _Nonnull)fromObject;
- (void)removeUploadingBy:(NSString * _Nonnull)videoID fromObject:(id _Nonnull)fromObject;
- (void)cancelUploadingBy:(NSString * _Nonnull)videoID fromObject:(id _Nonnull)fromObject;
- (VKUploadingState * _Nullable)uploadingBy:(NSString * _Nonnull)videoID fromObject:(id _Nonnull)fromObject SWIFT_WARN_UNUSED_RESULT;
- (void)putWithUploading:(VKUploadingState * _Nonnull)uploading fromObject:(id _Nonnull)fromObject;
- (void)confirmRecordingFor:(NSString * _Nonnull)videoID fromObject:(id _Nonnull)fromObject;
- (void)markUploadedFor:(NSString * _Nonnull)videoID fromObject:(id _Nonnull)fromObject;
- (void)markSyncedFor:(NSString * _Nonnull)videoID fromObject:(id _Nonnull)fromObject;
- (void)markConvertedFor:(NSString * _Nonnull)videoID fromObject:(id _Nonnull)fromObject;
- (void)updateDataUploadedFor:(NSString * _Nonnull)videoID with:(NSInteger)bytesUploaded fromObject:(id _Nonnull)fromObject;
- (void)updateUploadingURLFor:(NSString * _Nonnull)videoID url:(NSURL * _Nullable)url expirationDate:(NSDate * _Nullable)expirationDate fromObject:(id _Nonnull)fromObject;
- (void)updateResolutionsUploadedFor:(NSString * _Nonnull)videoID with:(NSArray<NSString *> * _Nonnull)resolutionsUploaded fromObject:(id _Nonnull)fromObject;
- (void)resetUploadedBytesFor:(NSString * _Nonnull)videoID fromObject:(id _Nonnull)fromObject;
- (void)updateCreationDateFor:(NSString * _Nonnull)videoID date:(NSDate * _Nonnull)date fromObject:(id _Nonnull)fromObject;
@end


SWIFT_CLASS("_TtC12VideoKitCore31VKUploadingStateToVKVideoMapper")
@interface VKUploadingStateToVKVideoMapper : NSObject
+ (VKVideo * _Nonnull)videoObjectByUploadingState:(VKUploadingState * _Nonnull)uploadingState fromObject:(id _Nonnull)fromObject SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12VideoKitCore9VKUploads")
@interface VKUploads : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VKUploads * _Nonnull shared;)
+ (VKUploads * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSArray<VKUpload *> * _Nonnull uploads;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12VideoKitCore14VKUserPlaylist")
@interface VKUserPlaylist : VKFilteredPlaylist
@end

@class CLLocation;
enum VKVideoState : NSInteger;

/// This class provides the representation of a video object
SWIFT_CLASS("_TtC12VideoKitCore7VKVideo")
@interface VKVideo : NSObject
/// The unique ID identifying this video
@property (nonatomic, readonly, copy) NSString * _Nonnull videoID;
/// The tags that describes this video
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull tags;
/// The metadata that describes this video
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull metadata;
/// The video rating
@property (nonatomic, readonly) NSInteger rating;
- (void)setMetadataWithMetadata:(NSDictionary<NSString *, NSString *> * _Nonnull)metadata reset:(BOOL)reset;
- (BOOL)isRatedWithIdentity:(NSString * _Nullable)identity SWIFT_WARN_UNUSED_RESULT;
- (void)rateWithIdentity:(NSString * _Nullable)identity increment:(NSInteger)increment;
/// The shareable url of this video
@property (nonatomic, readonly, copy) NSURL * _Nullable shareURL;
/// The geolocation to which this video was taken
@property (nonatomic, readonly, strong) CLLocation * _Nullable location;
/// The creation date of this video
@property (nonatomic, readonly, copy) NSDate * _Null_unspecified creationDate;
/// The shot date of this video
@property (nonatomic, readonly, copy) NSDate * _Null_unspecified shotOn;
/// The modified date of this video
@property (nonatomic, readonly, copy) NSDate * _Null_unspecified modifyDate;
/// The title of this video
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The description for this video
@property (nonatomic, readonly, copy) NSString * _Nonnull videoDescription;
/// The thumbnail image URL for this video
@property (nonatomic, readonly, copy) NSURL * _Nullable thumbnailImageURL;
/// The length of this video in seconds
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly) NSInteger height;
@property (nonatomic, readonly) NSInteger width;
/// The state of the video
@property (nonatomic, readonly) enum VKVideoState state;
/// Video Transcription
@property (nonatomic, readonly, copy) NSString * _Nullable transcription;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@class VKVideoFilter;
@class VKVideosResponse;

SWIFT_CLASS("_TtC12VideoKitCore10VKVideoAPI")
@interface VKVideoAPI : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VKVideoAPI * _Nonnull shared;)
+ (VKVideoAPI * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (id <VKCancellable> _Nonnull)videoBy:(NSString * _Nonnull)videoID completion:(void (^ _Nonnull)(VKVideo * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)videosCountByTags:(NSSet<NSString *> * _Nonnull)tags metadata:(NSDictionary<NSString *, NSString *> * _Nonnull)metadata completion:(void (^ _Nonnull)(NSInteger, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)videosByFilter:(VKVideoFilter * _Nonnull)filter sortOrder:(NSString * _Nonnull)sortOrder completion:(void (^ _Nonnull)(VKVideosResponse * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)videosByTags:(NSSet<NSString *> * _Nonnull)tags metadata:(NSDictionary<NSString *, NSString *> * _Nonnull)metadata page:(NSInteger)page perPage:(NSInteger)perPage sortOrder:(NSString * _Nonnull)sortOrder completion:(void (^ _Nonnull)(VKVideosResponse * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)videosByIdentity:(NSString * _Nonnull)identity page:(NSInteger)page perPage:(NSInteger)perPage sortOrder:(NSString * _Nonnull)sortOrder completion:(void (^ _Nonnull)(VKVideosResponse * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)videosByIds:(NSArray<NSString *> * _Nonnull)ids completion:(void (^ _Nonnull)(VKVideosResponse * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)deleteBy:(NSString * _Nonnull)videoID completion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)syncVideosWith:(NSDate * _Nonnull)date tags:(NSSet<NSString *> * _Nonnull)tags metadata:(NSDictionary<NSString *, NSString *> * _Nonnull)metadata completion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)updateVideoBy:(NSString * _Nonnull)videoID mp4Resolutions:(NSArray<NSString *> * _Nonnull)mp4Resolutions fromObject:(id _Nonnull)fromObject completion:(void (^ _Nonnull)(VKVideo * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)updateVideoBy:(NSString * _Nonnull)videoID parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters fromObject:(id _Nonnull)fromObject completion:(void (^ _Nonnull)(VKVideo * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)createVideoWithVideoID:(NSString * _Nonnull)videoID title:(NSString * _Nonnull)title date:(NSDate * _Nonnull)date location:(CLLocation * _Nonnull)location height:(NSInteger)height width:(NSInteger)width tags:(NSSet<NSString *> * _Nonnull)tags metadata:(NSDictionary<NSString *, NSString *> * _Nonnull)metadata fromObject:(id _Nonnull)fromObject completion:(void (^ _Nonnull)(VKVideo * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)createVideoWithTitle:(NSString * _Nonnull)title date:(NSDate * _Nonnull)date location:(CLLocation * _Nonnull)location height:(NSInteger)height width:(NSInteger)width tags:(NSSet<NSString *> * _Nonnull)tags metadata:(NSDictionary<NSString *, NSString *> * _Nonnull)metadata fromObject:(id _Nonnull)fromObject completion:(void (^ _Nonnull)(VKVideo * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)startConvertingVideoBy:(NSString * _Nonnull)videoID mediaPath:(NSString * _Nonnull)mediaPath fromObject:(id _Nonnull)fromObject completion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)uploadingURLsFor:(NSString * _Nonnull)videoID isImported:(BOOL)isImported fromObject:(id _Nonnull)fromObject completion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC12VideoKitCore12VKVideoCache")
@interface VKVideoCache : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VKVideoCache * _Nonnull shared;)
+ (VKVideoCache * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (id <VKCancellable> _Nullable)getVideo:(NSString * _Nonnull)id :(void (^ _Nonnull)(VKVideo * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nullable)getVideos:(NSArray<NSString *> * _Nonnull)ids :(void (^ _Nonnull)(NSArray<VKVideo *> * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
- (VKVideo * _Nullable)getCachedVideo:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (NSArray<VKVideo *> * _Nonnull)getCachedVideos:(NSArray<NSString *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
- (void)putVideoToCacheWithVideo:(VKVideo * _Nonnull)video;
- (void)putVideosToCacheWithVideos:(NSArray<VKVideo *> * _Nonnull)videos;
@end


SWIFT_CLASS("_TtC12VideoKitCore13VKVideoFilter")
@interface VKVideoFilter : NSObject
/// Empty initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, VKVideoResolution, open) {
  VKVideoResolutionRes1080p = 0,
  VKVideoResolutionRes720p = 1,
  VKVideoResolutionRes540p = 2,
  VKVideoResolutionRes360p = 3,
};


SWIFT_CLASS("_TtC12VideoKitCore15VKVideoResponse")
@interface VKVideoResponse : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Available values : init, processing, processed, failed, all, unknown
typedef SWIFT_ENUM(NSInteger, VKVideoState, open) {
  VKVideoStateInitializing = 0,
  VKVideoStateUnknown = 1,
  VKVideoStateProcessing = 2,
  VKVideoStateProcessed = 3,
  VKVideoStateFailed = 4,
  VKVideoStateAll = 5,
};


/// This is a video store class that contains all your repository of videos.  Use this class to query and delete videos.  Do not make an instance as everything in this class are class properties and class methods
SWIFT_CLASS("_TtC12VideoKitCore8VKVideos")
@interface VKVideos : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC12VideoKitCore16VKVideosResponse")
@interface VKVideosResponse : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum WebSocketReadyState : NSInteger;

/// WebSocket objects are bidirectional network streams that communicate over HTTP. RFC 6455.
SWIFT_CLASS("_TtC12VideoKitCore9WebSocket")
@interface WebSocket : NSObject
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
/// Create a WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond.
- (nonnull instancetype)init:(NSString * _Nonnull)url;
/// Create a WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond.
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url;
/// Create a WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond. Also include a list of protocols.
- (nonnull instancetype)init:(NSString * _Nonnull)url subProtocols:(NSArray<NSString *> * _Nonnull)subProtocols;
/// Create a WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond. Also include a protocol.
- (nonnull instancetype)init:(NSString * _Nonnull)url subProtocol:(NSString * _Nonnull)subProtocol;
/// Create a WebSocket connection from an NSURLRequest; Also include a list of protocols.
- (nonnull instancetype)initWithRequest:(NSURLRequest * _Nonnull)request subProtocols:(NSArray<NSString *> * _Nonnull)subProtocols OBJC_DESIGNATED_INITIALIZER;
/// Create a WebSocket object with a deferred connection; the connection is not opened until the .open() method is called.
- (nonnull instancetype)init;
/// The URL as resolved by the constructor. This is always an absolute URL. Read only.
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// A string indicating the name of the sub-protocol the server selected; this will be one of the strings specified in the protocols parameter when creating the WebSocket object.
@property (nonatomic, readonly, copy) NSString * _Nonnull subProtocol;
/// Allow for Self-Signed SSL Certificates. Default is false.
@property (nonatomic) BOOL allowSelfSignedSSL;
/// The queue for firing off events. default is main_queue
@property (nonatomic, strong) dispatch_queue_t _Nullable eventQueue;
/// The current state of the connection; this is one of the WebSocketReadyState constants. Read only.
@property (nonatomic, readonly) enum WebSocketReadyState readyState;
/// Opens a deferred or closed WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond.
- (void)open:(NSString * _Nonnull)url;
/// Opens a deferred or closed WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond.
- (void)openWithNsurl:(NSURL * _Nonnull)url;
/// Opens a deferred or closed WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond. Also include a list of protocols.
- (void)open:(NSString * _Nonnull)url subProtocols:(NSArray<NSString *> * _Nonnull)subProtocols;
/// Opens a deferred or closed WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond. Also include a protocol.
- (void)open:(NSString * _Nonnull)url subProtocol:(NSString * _Nonnull)subProtocol;
/// Opens a deferred or closed WebSocket connection from an NSURLRequest; Also include a list of protocols.
- (void)openWithRequest:(NSURLRequest * _Nonnull)request subProtocols:(NSArray<NSString *> * _Nonnull)subProtocols;
/// Opens a closed WebSocket connection from an NSURLRequest; Uses the same request and protocols as previously closed WebSocket
- (void)open;
/// Closes the WebSocket connection or connection attempt, if any. If the connection is already closed or in the state of closing, this method does nothing.
/// :param: code An integer indicating the status code explaining why the connection is being closed. If this parameter is not specified, a default value of 1000 (indicating a normal closure) is assumed.
/// :param: reason A human-readable string explaining why the connection is closing. This string must be no longer than 123 bytes of UTF-8 text (not characters).
- (void)close:(NSInteger)code reason:(NSString * _Nonnull)reason;
/// Transmits message to the server over the WebSocket connection.
/// :param: message The message to be sent to the server.
- (void)send:(id _Nonnull)message;
/// Transmits a ping to the server over the WebSocket connection.
/// :param: optional message The data to be sent to the server.
- (void)ping:(id _Nonnull)message;
/// Transmits a ping to the server over the WebSocket connection.
- (void)ping;
@end


@interface WebSocket (SWIFT_EXTENSION(VideoKitCore))
/// The events of the WebSocket using a delegate.
@property (nonatomic, strong) id <WebSocketDelegate> _Nullable delegate;
/// Transmits message to the server over the WebSocket connection.
/// :param: text The message (string) to be sent to the server.
- (void)sendWithText:(NSString * _Nonnull)text;
/// Transmits message to the server over the WebSocket connection.
/// :param: data The message (binary) to be sent to the server.
- (void)sendWithData:(NSData * _Nonnull)data;
@end


/// The WebSocketReadyState enum is used by the readyState property to describe the status of the WebSocket connection.
typedef SWIFT_ENUM(NSInteger, WebSocketReadyState, open) {
/// The connection is not yet open.
  WebSocketReadyStateConnecting = 0,
/// The connection is open and ready to communicate.
  WebSocketReadyStateOpen = 1,
/// The connection is in the process of closing.
  WebSocketReadyStateClosing = 2,
/// The connection is closed or couldn’t be opened.
  WebSocketReadyStateClosed = 3,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.3.2 effective-4.1.50 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef VIDEOKITCORE_SWIFT_H
#define VIDEOKITCORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="VideoKitCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


@interface NSError (SWIFT_EXTENSION(VideoKitCore))
@property (nonatomic, readonly) BOOL isOffline;
@property (nonatomic, readonly) BOOL timedOut;
@property (nonatomic, readonly) BOOL isAuthError;
@property (nonatomic, readonly) BOOL isNotFound;
@property (nonatomic, readonly) BOOL isRangeNotSatisfied;
@property (nonatomic, readonly) BOOL isQuotaError;
@property (nonatomic, readonly) BOOL isServerMaintenanceError;
@property (nonatomic, readonly) BOOL isTerminated;
@property (nonatomic, readonly) BOOL isServerDownError;
@property (nonatomic, readonly) BOOL isRetryError;
@property (nonatomic, readonly) BOOL isCancelled;
@end


SWIFT_PROTOCOL("_TtP12VideoKitCore13VKCancellable_")
@protocol VKCancellable
- (void)cancelIt;
@end


@interface NSURLSessionTask (SWIFT_EXTENSION(VideoKitCore)) <VKCancellable>
- (void)cancelIt;
@end



SWIFT_CLASS("_TtC12VideoKitCore10VKPlaylist")
@interface VKPlaylist : NSObject
/// Initialize empty playlist
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12VideoKitCore16VKCustomPlaylist")
@interface VKCustomPlaylist : VKPlaylist
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Defines the errors that comes from VKit.
typedef SWIFT_ENUM(NSInteger, VKError, open) {
/// No internet connection.
  VKErrorIsOffline = 0,
/// The session has not started.
  VKErrorSessionNotStarted = 1,
/// Authentication error occured.
  VKErrorUnableToAuthenticate = 2,
/// Network timed out.
  VKErrorNetworkTimeout = 3,
/// Server is currently down.
  VKErrorServerDown = 4,
/// The values in the data object being passed is too large. Please reduce.
  VKErrorDataOverflow = 5,
/// The quota has been reached.
  VKErrorQuotaReached = 6,
/// Server is currently under maintenance.
  VKErrorServerMaintenance = 7,
/// The video object being requested is out of bound.
  VKErrorPlaylistOutOfBound = 8,
/// The video file is unavailable
  VKErrorVideoIsUnavailable = 9,
/// The video object can’t be reached
  VKErrorVideoIsUnreachable = 10,
/// The video object is not found
  VKErrorVideoIsNotFound = 11,
/// The video object doesn’t have url to play
  VKErrorVideoIsNotPlayable = 12,
/// The video file to upload is not found
  VKErrorFileIsNotFound = 13,
/// Incorrect video file type for upload
  VKErrorIncorrectFileType = 14,
/// Unknown error.
  VKErrorUnknownError = 15,
};
static NSString * _Nonnull const VKErrorDomain = @"VideoKitCore.VKError";


SWIFT_CLASS("_TtC12VideoKitCore18VKFileSystemHelper")
@interface VKFileSystemHelper : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12VideoKitCore18VKFilteredPlaylist")
@interface VKFilteredPlaylist : VKPlaylist
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// This class represents a playlist of videos
SWIFT_CLASS("_TtC12VideoKitCore16VKLegacyPlaylist")
@interface VKLegacyPlaylist : VKPlaylist
@property (nonatomic) NSInteger internalCount;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL("_TtP12VideoKitCore24VKLegacyPlaylistDelegate_") SWIFT_DEPRECATED_MSG("", "_TtP12VideoKitCore18VKPlaylistDelegate_")
@protocol VKLegacyPlaylistDelegate
- (void)updatedWithPlaylist:(VKLegacyPlaylist * _Nonnull)playlist newIndexes:(NSArray<NSNumber *> * _Nonnull)newIndexes oldIndexes:(NSArray<NSNumber *> * _Nonnull)oldIndexes newCount:(NSInteger)newCount localVideo:(BOOL)localVideo;
- (void)updatedWithPlaylist:(VKLegacyPlaylist * _Nonnull)playlist newIndexes:(NSArray<NSNumber *> * _Nonnull)newIndexes newCount:(NSInteger)newCount atStart:(BOOL)atStart;
@end

@class VKVideo;

SWIFT_CLASS("_TtC12VideoKitCore17VKLocalVideoCache")
@interface VKLocalVideoCache : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VKLocalVideoCache * _Nonnull shared;)
+ (VKLocalVideoCache * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (void)putWithVideoObject:(VKVideo * _Nonnull)videoObject fromObject:(id _Nonnull)fromObject;
- (void)removeWithVideoID:(NSString * _Nonnull)videoID;
@end


SWIFT_CLASS("_TtC12VideoKitCore18VKMetadataPlaylist")
@interface VKMetadataPlaylist : VKFilteredPlaylist
@end


SWIFT_CLASS("_TtC12VideoKitCore22VKNotificationsManager")
@interface VKNotificationsManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// WebSocketDelegate is an Objective-C alternative to WebSocketEvents and is used to delegate the events for the WebSocket connection.
SWIFT_PROTOCOL("_TtP12VideoKitCore17WebSocketDelegate_")
@protocol WebSocketDelegate
/// A function to be called when the WebSocket connection’s readyState changes to .Open; this indicates that the connection is ready to send and receive data.
- (void)webSocketOpen;
/// A function to be called when the WebSocket connection’s readyState changes to .Closed.
- (void)webSocketClose:(NSInteger)code reason:(NSString * _Nonnull)reason wasClean:(BOOL)wasClean;
/// A function to be called when an error occurs.
- (void)webSocketError:(NSError * _Nonnull)error;
@optional
/// A function to be called when a message (string) is received from the server.
- (void)webSocketMessageText:(NSString * _Nonnull)text;
/// A function to be called when a message (binary) is received from the server.
- (void)webSocketMessageData:(NSData * _Nonnull)data;
/// A function to be called when a pong is received from the server.
- (void)webSocketPong;
/// A function to be called when the WebSocket process has ended; this event is guarenteed to be called once and can be used as an alternative to the “close” or “error” events.
- (void)webSocketEnd:(NSInteger)code reason:(NSString * _Nonnull)reason wasClean:(BOOL)wasClean error:(NSError * _Nullable)error;
@end


@interface VKNotificationsManager (SWIFT_EXTENSION(VideoKitCore)) <WebSocketDelegate>
- (void)webSocketOpen;
- (void)webSocketClose:(NSInteger)code reason:(NSString * _Nonnull)reason wasClean:(BOOL)wasClean;
- (void)webSocketError:(NSError * _Nonnull)error;
- (void)webSocketMessageData:(NSData * _Nonnull)data;
- (void)webSocketMessageText:(NSString * _Nonnull)text;
@end


enum VKPlaylistUpdateType : NSInteger;

SWIFT_PROTOCOL("_TtP12VideoKitCore18VKPlaylistDelegate_")
@protocol VKPlaylistDelegate
@optional
/// Called after new videos where loaded from the video.io backend
- (void)loadedWithVideos:(NSArray<VKVideo *> * _Nonnull)videos;
/// Called after playlist has been updated
- (void)updatedWithUpdatedIndexes:(NSArray<NSNumber *> * _Nonnull)updatedIndexes type:(enum VKPlaylistUpdateType)type;
@end

typedef SWIFT_ENUM(NSInteger, VKPlaylistUpdateType, open) {
/// Playlist has been updated (new videos added or removed)
  VKPlaylistUpdateTypeUpdate = 0,
/// Playlist was reset
  VKPlaylistUpdateTypeReset = 1,
};

@class NSURLSession;
@class NSURLSessionDataTask;
@class NSURLResponse;

SWIFT_CLASS("_TtC12VideoKitCore11VKRequester")
@interface VKRequester : NSObject <NSURLSessionDataDelegate>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveResponse:(NSURLResponse * _Nonnull)response completionHandler:(void (^ _Nonnull)(NSURLSessionResponseDisposition))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveData:(NSData * _Nonnull)data;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
@end

enum VKSessionState : NSInteger;

/// This class provides access to the account
SWIFT_CLASS("_TtC12VideoKitCore9VKSession")
@interface VKSession : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VKSession * _Nonnull current;)
+ (VKSession * _Nonnull)current SWIFT_WARN_UNUSED_RESULT;
/// The session token that is assigned to you by your backend (e.g. https://github.com/Video-io/vkit-nodejs)
@property (nonatomic, copy) NSString * _Nullable sessionToken;
/// The API token is assigned to you by http://panel.video.io/app-settings
@property (nonatomic, copy) NSString * _Nullable apiToken;
/// Allows client to start session using appSecretToken. Be careful only for testing purposes.
@property (nonatomic) BOOL secureModeEnabled;
/// The application id that is assigned to you
@property (nonatomic, copy) NSString * _Nullable appID;
/// Account id assigned by gateway.video.io
@property (nonatomic, copy) NSString * _Nullable accountId;
/// Session is going to expire at date
@property (nonatomic, copy) NSDate * _Nullable expiresAt;
/// Session created at Date
@property (nonatomic, copy) NSDate * _Nullable createdAt;
/// Identity for current session
@property (nonatomic, copy) NSString * _Nonnull identity;
/// This describes the current account state of the session.  A <code>VKNotificationConstants.AccountStateChanged</code> is sent when state are changed
@property (nonatomic, readonly) enum VKSessionState state;
/// This is the error that may have occured while trying to start a session.
/// This is not <code>nil</code> if <code>accountState == .Disconnected</code>
@property (nonatomic, readonly) NSError * _Nullable error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Starts a session using global app token (insecure)
- (void)startWithApiToken:(NSString * _Nonnull)apiToken identity:(NSString * _Nonnull)identity completion:(void (^ _Nullable)(enum VKSessionState, NSDictionary<NSString *, id> * _Nonnull, NSError * _Nullable))completion;
/// Starts the session. You could check on the state of session via <code>accountState</code>.
/// precondition:
/// Ensure <code>devToken</code> and <code>appID</code> are filled
- (void)startWithSessionToken:(NSString * _Nonnull)sessionToken;
- (void)startSessionWithCompletion:(void (^ _Nullable)(enum VKSessionState, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("", "start");
- (void)stopSession SWIFT_DEPRECATED_MSG("", "stop");
/// Stops the session. You could check on the state of the session via <code>accountState</code>
- (void)stop;
@end



SWIFT_CLASS("_TtC12VideoKitCore12VKSessionAPI")
@interface VKSessionAPI : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VKSessionAPI * _Nonnull shared;)
+ (VKSessionAPI * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (id <VKCancellable> _Nonnull)sessionWithIdentity:(NSString * _Nonnull)identity completion:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
@end

/// Current account state
typedef SWIFT_ENUM(NSInteger, VKSessionState, open) {
/// The session has started
  VKSessionStateConnected = 0,
/// Connecting to server
  VKSessionStateConnecting = 1,
/// Session has stopped
  VKSessionStateDisconnected = 2,
/// There was an error trying to connect to server. You should check VKAccount.error to see the description of the error
  VKSessionStateError = 3,
};


SWIFT_CLASS("_TtC12VideoKitCore8VKStream")
@interface VKStream : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, VKStreamProfile, open) {
  VKStreamProfileLowLatency = 0,
  VKStreamProfileUltraLowLatency = 1,
};

typedef SWIFT_ENUM(NSInteger, VKStreamState, open) {
  VKStreamStateUnknown = 0,
  VKStreamStateReady = 1,
  VKStreamStateFailed = 2,
  VKStreamStatePreview = 3,
  VKStreamStateRecording = 4,
  VKStreamStateRecorded = 5,
  VKStreamStateFinished = 6,
  VKStreamStatePaused = 7,
  VKStreamStatePreparing = 8,
  VKStreamStateLive = 9,
  VKStreamStateAll = 10,
};


SWIFT_CLASS("_TtC12VideoKitCore12VKStreamsAPI")
@interface VKStreamsAPI : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VKStreamsAPI * _Nonnull shared;)
+ (VKStreamsAPI * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Get a stream by id
/// Docs: https://docs.video.io/api/#tag/streams/paths/~1v1~1streams~1{id}/get
/// \param id String Stream ID
///
- (id <VKCancellable> _Nonnull)getWithStreamId:(NSString * _Nonnull)id completion:(void (^ _Nonnull)(VKStream * _Nullable, NSError * _Nullable))completion;
/// Get streams by state
/// Docs: http://gateway.video.io/documentation/index.html#/streams/get_v1_streams
/// \param id String Stream ID
///
- (id <VKCancellable> _Nonnull)listWithState:(enum VKStreamState)state completion:(void (^ _Nonnull)(NSArray<VKStream *> * _Nonnull, NSError * _Nullable))completion;
/// Get a stream by id
/// Docs: https://gateway.video.io/documentation/index.html#/streams/post_v1_streams
/// \param profile String Stream Profile
///
- (id <VKCancellable> _Nonnull)createWithProfile:(enum VKStreamProfile)profile completion:(void (^ _Nonnull)(VKStream * _Nullable, NSError * _Nullable))completion;
/// Delete an existing stream
/// Docs: https://gateway.video.io/documentation/index.html#/streams/delete_v1_streams__id_
/// \param id String Stream ID
///
- (id <VKCancellable> _Nonnull)deleteWithStreamId:(NSString * _Nonnull)id completion:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull, NSError * _Nullable))completion;
@end


SWIFT_CLASS("_TtC12VideoKitCore14VKTagsPlaylist")
@interface VKTagsPlaylist : VKFilteredPlaylist
@end


SWIFT_CLASS_NAMED("VKTokenObject")
@interface SWIFTVKTokenObject : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SWIFTVKTokenObject * _Nonnull sharedInstance;)
+ (SWIFTVKTokenObject * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12VideoKitCore8VKUpload")
@interface VKUpload : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12VideoKitCore16VKUploadingState")
@interface VKUploadingState : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull videoID;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull metadata;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull tags;
@property (nonatomic, readonly) NSInteger height;
@property (nonatomic, readonly) NSInteger width;
@property (nonatomic, readonly) double latitude;
@property (nonatomic, readonly) double longitude;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSString * _Nonnull descr;
@property (nonatomic, readonly, copy) NSDate * _Nonnull shotOn;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull resolutionsToUpload;
@property (nonatomic, copy) NSDate * _Nonnull createdAt;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull resolutionsUploaded;
@property (nonatomic, copy) NSURL * _Nullable urlToUpload;
@property (nonatomic, copy) NSDate * _Nullable urlExpirationDate;
@property (nonatomic) BOOL isRecordingComplete;
@property (nonatomic) NSInteger bytesUploaded;
@property (nonatomic) BOOL isUploaded;
@property (nonatomic) BOOL isSynced;
@property (nonatomic) BOOL isConverted;
@property (nonatomic) BOOL isImported;
+ (VKUploadingState * _Nonnull)initWithVideoWithVideo:(VKVideo * _Nonnull)video SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
+ (VKUploadingState * _Nonnull)internalObjCInitWithVideoID:(NSString * _Nonnull)videoID tags:(NSSet<NSString *> * _Nonnull)tags metadata:(NSDictionary<NSString *, NSString *> * _Nonnull)metadata width:(NSInteger)width height:(NSInteger)height latitude:(double)latitude longitude:(double)longitude title:(NSString * _Nonnull)title descr:(NSString * _Nonnull)descr shotOn:(NSDate * _Nonnull)shotOn createdAt:(NSDate * _Nonnull)createdAt resolutionsToUpload:(NSArray<NSString *> * _Nonnull)resolutionsToUpload resolutionsUploaded:(NSArray<NSString *> * _Nonnull)resolutionsUploaded isRecordingComplete:(BOOL)isRecordingComplete bytesUploaded:(NSInteger)bytesUploaded isUploaded:(BOOL)isUploaded isSynced:(BOOL)isSynced isConverted:(BOOL)isConverted isImported:(BOOL)isImported SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)bytesFor:(NSString * _Nonnull)resolution SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)bytesForFile:(NSURL * _Nonnull)file SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSInteger totalBytesToUpload;
@property (nonatomic, readonly) BOOL requireConvert;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12VideoKitCore23VKUploadingStateManager")
@interface VKUploadingStateManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VKUploadingStateManager * _Nonnull shared;)
+ (VKUploadingStateManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (NSArray<VKUploadingState *> * _Nonnull)recorded SWIFT_WARN_UNUSED_RESULT;
- (NSArray<VKUploadingState *> * _Nonnull)recordedButNotUploadedFromObject:(id _Nonnull)fromObject SWIFT_WARN_UNUSED_RESULT;
- (NSArray<VKUploadingState *> * _Nonnull)notRecorded SWIFT_WARN_UNUSED_RESULT;
- (NSArray<VKUploadingState *> * _Nonnull)uploaded SWIFT_WARN_UNUSED_RESULT;
- (void)removeWithVideoIDs:(NSArray<NSString *> * _Nonnull)videoIDs fromObject:(id _Nonnull)fromObject;
- (void)removeUploadingBy:(NSString * _Nonnull)videoID fromObject:(id _Nonnull)fromObject;
- (void)cancelUploadingBy:(NSString * _Nonnull)videoID fromObject:(id _Nonnull)fromObject;
- (VKUploadingState * _Nullable)uploadingBy:(NSString * _Nonnull)videoID fromObject:(id _Nonnull)fromObject SWIFT_WARN_UNUSED_RESULT;
- (void)putWithUploading:(VKUploadingState * _Nonnull)uploading fromObject:(id _Nonnull)fromObject;
- (void)confirmRecordingFor:(NSString * _Nonnull)videoID fromObject:(id _Nonnull)fromObject;
- (void)markUploadedFor:(NSString * _Nonnull)videoID fromObject:(id _Nonnull)fromObject;
- (void)markSyncedFor:(NSString * _Nonnull)videoID fromObject:(id _Nonnull)fromObject;
- (void)markConvertedFor:(NSString * _Nonnull)videoID fromObject:(id _Nonnull)fromObject;
- (void)updateDataUploadedFor:(NSString * _Nonnull)videoID with:(NSInteger)bytesUploaded fromObject:(id _Nonnull)fromObject;
- (void)updateUploadingURLFor:(NSString * _Nonnull)videoID url:(NSURL * _Nullable)url expirationDate:(NSDate * _Nullable)expirationDate fromObject:(id _Nonnull)fromObject;
- (void)updateResolutionsUploadedFor:(NSString * _Nonnull)videoID with:(NSArray<NSString *> * _Nonnull)resolutionsUploaded fromObject:(id _Nonnull)fromObject;
- (void)resetUploadedBytesFor:(NSString * _Nonnull)videoID fromObject:(id _Nonnull)fromObject;
- (void)updateCreationDateFor:(NSString * _Nonnull)videoID date:(NSDate * _Nonnull)date fromObject:(id _Nonnull)fromObject;
@end


SWIFT_CLASS("_TtC12VideoKitCore31VKUploadingStateToVKVideoMapper")
@interface VKUploadingStateToVKVideoMapper : NSObject
+ (VKVideo * _Nonnull)videoObjectByUploadingState:(VKUploadingState * _Nonnull)uploadingState fromObject:(id _Nonnull)fromObject SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12VideoKitCore9VKUploads")
@interface VKUploads : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VKUploads * _Nonnull shared;)
+ (VKUploads * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSArray<VKUpload *> * _Nonnull uploads;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12VideoKitCore14VKUserPlaylist")
@interface VKUserPlaylist : VKFilteredPlaylist
@end

@class CLLocation;
enum VKVideoState : NSInteger;

/// This class provides the representation of a video object
SWIFT_CLASS("_TtC12VideoKitCore7VKVideo")
@interface VKVideo : NSObject
/// The unique ID identifying this video
@property (nonatomic, readonly, copy) NSString * _Nonnull videoID;
/// The tags that describes this video
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull tags;
/// The metadata that describes this video
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull metadata;
/// The video rating
@property (nonatomic, readonly) NSInteger rating;
- (void)setMetadataWithMetadata:(NSDictionary<NSString *, NSString *> * _Nonnull)metadata reset:(BOOL)reset;
- (BOOL)isRatedWithIdentity:(NSString * _Nullable)identity SWIFT_WARN_UNUSED_RESULT;
- (void)rateWithIdentity:(NSString * _Nullable)identity increment:(NSInteger)increment;
/// The shareable url of this video
@property (nonatomic, readonly, copy) NSURL * _Nullable shareURL;
/// The geolocation to which this video was taken
@property (nonatomic, readonly, strong) CLLocation * _Nullable location;
/// The creation date of this video
@property (nonatomic, readonly, copy) NSDate * _Null_unspecified creationDate;
/// The shot date of this video
@property (nonatomic, readonly, copy) NSDate * _Null_unspecified shotOn;
/// The modified date of this video
@property (nonatomic, readonly, copy) NSDate * _Null_unspecified modifyDate;
/// The title of this video
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The description for this video
@property (nonatomic, readonly, copy) NSString * _Nonnull videoDescription;
/// The thumbnail image URL for this video
@property (nonatomic, readonly, copy) NSURL * _Nullable thumbnailImageURL;
/// The length of this video in seconds
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly) NSInteger height;
@property (nonatomic, readonly) NSInteger width;
/// The state of the video
@property (nonatomic, readonly) enum VKVideoState state;
/// Video Transcription
@property (nonatomic, readonly, copy) NSString * _Nullable transcription;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@class VKVideoFilter;
@class VKVideosResponse;

SWIFT_CLASS("_TtC12VideoKitCore10VKVideoAPI")
@interface VKVideoAPI : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VKVideoAPI * _Nonnull shared;)
+ (VKVideoAPI * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (id <VKCancellable> _Nonnull)videoBy:(NSString * _Nonnull)videoID completion:(void (^ _Nonnull)(VKVideo * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)videosCountByTags:(NSSet<NSString *> * _Nonnull)tags metadata:(NSDictionary<NSString *, NSString *> * _Nonnull)metadata completion:(void (^ _Nonnull)(NSInteger, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)videosByFilter:(VKVideoFilter * _Nonnull)filter sortOrder:(NSString * _Nonnull)sortOrder completion:(void (^ _Nonnull)(VKVideosResponse * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)videosByTags:(NSSet<NSString *> * _Nonnull)tags metadata:(NSDictionary<NSString *, NSString *> * _Nonnull)metadata page:(NSInteger)page perPage:(NSInteger)perPage sortOrder:(NSString * _Nonnull)sortOrder completion:(void (^ _Nonnull)(VKVideosResponse * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)videosByIdentity:(NSString * _Nonnull)identity page:(NSInteger)page perPage:(NSInteger)perPage sortOrder:(NSString * _Nonnull)sortOrder completion:(void (^ _Nonnull)(VKVideosResponse * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)videosByIds:(NSArray<NSString *> * _Nonnull)ids completion:(void (^ _Nonnull)(VKVideosResponse * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)deleteBy:(NSString * _Nonnull)videoID completion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)syncVideosWith:(NSDate * _Nonnull)date tags:(NSSet<NSString *> * _Nonnull)tags metadata:(NSDictionary<NSString *, NSString *> * _Nonnull)metadata completion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)updateVideoBy:(NSString * _Nonnull)videoID mp4Resolutions:(NSArray<NSString *> * _Nonnull)mp4Resolutions fromObject:(id _Nonnull)fromObject completion:(void (^ _Nonnull)(VKVideo * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)updateVideoBy:(NSString * _Nonnull)videoID parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters fromObject:(id _Nonnull)fromObject completion:(void (^ _Nonnull)(VKVideo * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)createVideoWithVideoID:(NSString * _Nonnull)videoID title:(NSString * _Nonnull)title date:(NSDate * _Nonnull)date location:(CLLocation * _Nonnull)location height:(NSInteger)height width:(NSInteger)width tags:(NSSet<NSString *> * _Nonnull)tags metadata:(NSDictionary<NSString *, NSString *> * _Nonnull)metadata fromObject:(id _Nonnull)fromObject completion:(void (^ _Nonnull)(VKVideo * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)createVideoWithTitle:(NSString * _Nonnull)title date:(NSDate * _Nonnull)date location:(CLLocation * _Nonnull)location height:(NSInteger)height width:(NSInteger)width tags:(NSSet<NSString *> * _Nonnull)tags metadata:(NSDictionary<NSString *, NSString *> * _Nonnull)metadata fromObject:(id _Nonnull)fromObject completion:(void (^ _Nonnull)(VKVideo * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)startConvertingVideoBy:(NSString * _Nonnull)videoID mediaPath:(NSString * _Nonnull)mediaPath fromObject:(id _Nonnull)fromObject completion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nonnull)uploadingURLsFor:(NSString * _Nonnull)videoID isImported:(BOOL)isImported fromObject:(id _Nonnull)fromObject completion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC12VideoKitCore12VKVideoCache")
@interface VKVideoCache : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VKVideoCache * _Nonnull shared;)
+ (VKVideoCache * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (id <VKCancellable> _Nullable)getVideo:(NSString * _Nonnull)id :(void (^ _Nonnull)(VKVideo * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (id <VKCancellable> _Nullable)getVideos:(NSArray<NSString *> * _Nonnull)ids :(void (^ _Nonnull)(NSArray<VKVideo *> * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
- (VKVideo * _Nullable)getCachedVideo:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (NSArray<VKVideo *> * _Nonnull)getCachedVideos:(NSArray<NSString *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
- (void)putVideoToCacheWithVideo:(VKVideo * _Nonnull)video;
- (void)putVideosToCacheWithVideos:(NSArray<VKVideo *> * _Nonnull)videos;
@end


SWIFT_CLASS("_TtC12VideoKitCore13VKVideoFilter")
@interface VKVideoFilter : NSObject
/// Empty initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, VKVideoResolution, open) {
  VKVideoResolutionRes1080p = 0,
  VKVideoResolutionRes720p = 1,
  VKVideoResolutionRes540p = 2,
  VKVideoResolutionRes360p = 3,
};


SWIFT_CLASS("_TtC12VideoKitCore15VKVideoResponse")
@interface VKVideoResponse : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Available values : init, processing, processed, failed, all, unknown
typedef SWIFT_ENUM(NSInteger, VKVideoState, open) {
  VKVideoStateInitializing = 0,
  VKVideoStateUnknown = 1,
  VKVideoStateProcessing = 2,
  VKVideoStateProcessed = 3,
  VKVideoStateFailed = 4,
  VKVideoStateAll = 5,
};


/// This is a video store class that contains all your repository of videos.  Use this class to query and delete videos.  Do not make an instance as everything in this class are class properties and class methods
SWIFT_CLASS("_TtC12VideoKitCore8VKVideos")
@interface VKVideos : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC12VideoKitCore16VKVideosResponse")
@interface VKVideosResponse : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum WebSocketReadyState : NSInteger;

/// WebSocket objects are bidirectional network streams that communicate over HTTP. RFC 6455.
SWIFT_CLASS("_TtC12VideoKitCore9WebSocket")
@interface WebSocket : NSObject
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
/// Create a WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond.
- (nonnull instancetype)init:(NSString * _Nonnull)url;
/// Create a WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond.
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url;
/// Create a WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond. Also include a list of protocols.
- (nonnull instancetype)init:(NSString * _Nonnull)url subProtocols:(NSArray<NSString *> * _Nonnull)subProtocols;
/// Create a WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond. Also include a protocol.
- (nonnull instancetype)init:(NSString * _Nonnull)url subProtocol:(NSString * _Nonnull)subProtocol;
/// Create a WebSocket connection from an NSURLRequest; Also include a list of protocols.
- (nonnull instancetype)initWithRequest:(NSURLRequest * _Nonnull)request subProtocols:(NSArray<NSString *> * _Nonnull)subProtocols OBJC_DESIGNATED_INITIALIZER;
/// Create a WebSocket object with a deferred connection; the connection is not opened until the .open() method is called.
- (nonnull instancetype)init;
/// The URL as resolved by the constructor. This is always an absolute URL. Read only.
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// A string indicating the name of the sub-protocol the server selected; this will be one of the strings specified in the protocols parameter when creating the WebSocket object.
@property (nonatomic, readonly, copy) NSString * _Nonnull subProtocol;
/// Allow for Self-Signed SSL Certificates. Default is false.
@property (nonatomic) BOOL allowSelfSignedSSL;
/// The queue for firing off events. default is main_queue
@property (nonatomic, strong) dispatch_queue_t _Nullable eventQueue;
/// The current state of the connection; this is one of the WebSocketReadyState constants. Read only.
@property (nonatomic, readonly) enum WebSocketReadyState readyState;
/// Opens a deferred or closed WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond.
- (void)open:(NSString * _Nonnull)url;
/// Opens a deferred or closed WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond.
- (void)openWithNsurl:(NSURL * _Nonnull)url;
/// Opens a deferred or closed WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond. Also include a list of protocols.
- (void)open:(NSString * _Nonnull)url subProtocols:(NSArray<NSString *> * _Nonnull)subProtocols;
/// Opens a deferred or closed WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond. Also include a protocol.
- (void)open:(NSString * _Nonnull)url subProtocol:(NSString * _Nonnull)subProtocol;
/// Opens a deferred or closed WebSocket connection from an NSURLRequest; Also include a list of protocols.
- (void)openWithRequest:(NSURLRequest * _Nonnull)request subProtocols:(NSArray<NSString *> * _Nonnull)subProtocols;
/// Opens a closed WebSocket connection from an NSURLRequest; Uses the same request and protocols as previously closed WebSocket
- (void)open;
/// Closes the WebSocket connection or connection attempt, if any. If the connection is already closed or in the state of closing, this method does nothing.
/// :param: code An integer indicating the status code explaining why the connection is being closed. If this parameter is not specified, a default value of 1000 (indicating a normal closure) is assumed.
/// :param: reason A human-readable string explaining why the connection is closing. This string must be no longer than 123 bytes of UTF-8 text (not characters).
- (void)close:(NSInteger)code reason:(NSString * _Nonnull)reason;
/// Transmits message to the server over the WebSocket connection.
/// :param: message The message to be sent to the server.
- (void)send:(id _Nonnull)message;
/// Transmits a ping to the server over the WebSocket connection.
/// :param: optional message The data to be sent to the server.
- (void)ping:(id _Nonnull)message;
/// Transmits a ping to the server over the WebSocket connection.
- (void)ping;
@end


@interface WebSocket (SWIFT_EXTENSION(VideoKitCore))
/// The events of the WebSocket using a delegate.
@property (nonatomic, strong) id <WebSocketDelegate> _Nullable delegate;
/// Transmits message to the server over the WebSocket connection.
/// :param: text The message (string) to be sent to the server.
- (void)sendWithText:(NSString * _Nonnull)text;
/// Transmits message to the server over the WebSocket connection.
/// :param: data The message (binary) to be sent to the server.
- (void)sendWithData:(NSData * _Nonnull)data;
@end


/// The WebSocketReadyState enum is used by the readyState property to describe the status of the WebSocket connection.
typedef SWIFT_ENUM(NSInteger, WebSocketReadyState, open) {
/// The connection is not yet open.
  WebSocketReadyStateConnecting = 0,
/// The connection is open and ready to communicate.
  WebSocketReadyStateOpen = 1,
/// The connection is in the process of closing.
  WebSocketReadyStateClosing = 2,
/// The connection is closed or couldn’t be opened.
  WebSocketReadyStateClosed = 3,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
