// Generated by Apple Swift version 5.3.2 effective-4.1.50 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef VIDEOKITPLAYER_SWIFT_H
#define VIDEOKITPLAYER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import VideoKitCore;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="VideoKitPlayer",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



/// Indicates the different aspect mode.
typedef SWIFT_ENUM(NSInteger, VKAspectMode, open) {
/// The aspect ratio is respected and the entire frame could be seen.
  VKAspectModeResizeAspect = 0,
/// The aspect ratio is respected but the frame would fill the entire view.
  VKAspectModeResizeAspectFill = 1,
/// The aspect ratio is not respected but the entire frame would fill the view.
  VKAspectModeResize = 2,
};

@class NSCoder;
@class UIImage;

SWIFT_CLASS("_TtC14VideoKitPlayer11VKNoiseView")
@interface VKNoiseView : UIImageView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage SWIFT_UNAVAILABLE;
@end

/// Indicates the different play state.
typedef SWIFT_ENUM(NSInteger, VKPlayState, open) {
/// This is an unknown undefined state.
  VKPlayStateUnknown = 0,
/// Pause state.
  VKPlayStatePause = 1,
/// Playing state.
  VKPlayStatePlaying = 2,
};

@protocol VKPlayerViewDelegate;
@class VKVideo;

SWIFT_CLASS("_TtC14VideoKitPlayer12VKPlayerView")
@interface VKPlayerView : UIView
@property (nonatomic, weak) id <VKPlayerViewDelegate> _Nullable delegate;
/// Indicates the current state of the player.  This property is read only and can be observed via KVO.
@property (nonatomic, readonly) enum VKPlayState playState;
/// Indicates how video will occupy it’s place.
@property (nonatomic) enum VKAspectMode aspectMode;
/// Indicates whether player should loop video
@property (nonatomic) BOOL loop;
/// Indicates whether player is muted
@property (nonatomic) BOOL muted;
/// Indicates the current time position of the player.  This property is read only and can be observed via KVO.
@property (nonatomic, readonly) NSTimeInterval currentTime;
/// The duration of the current playing item.  If there’s no item to be played the value is 0.
@property (nonatomic, readonly) NSTimeInterval duration;
/// The current video of the player.
@property (nonatomic, readonly, strong) VKVideo * _Nullable video;
/// Indicates whether the current video is ready to play
@property (nonatomic, readonly) BOOL isReadyToPlay;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (void)updateConstraints;
/// Reset player to initial state
- (void)reset;
/// Sets the player to a particular video object without playing it just yet.  It will begin to preload the video.
/// \param video The video object to set to.
///
- (void)setWithVideo:(VKVideo * _Nonnull)video;
/// Play the video object.
/// \param video The video object to play.
///
- (void)playWithVideo:(VKVideo * _Nonnull)video;
/// Play the current video.
- (void)play;
/// Pause playback the current video.
- (void)pause;
/// Stop playback of the current video and set playback position to the beginning.
- (void)stop;
/// Move the current play position to a different time position
/// \param to The time position to move to.
///
- (void)seekTo:(NSTimeInterval)to;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end

@class AVAssetResourceLoader;
@class AVAssetResourceLoadingRequest;

@interface VKPlayerView (SWIFT_EXTENSION(VideoKitPlayer)) <AVAssetResourceLoaderDelegate>
- (BOOL)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader shouldWaitForLoadingOfRequestedResource:(AVAssetResourceLoadingRequest * _Nonnull)loadingRequest SWIFT_WARN_UNUSED_RESULT;
- (void)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader didCancelLoadingRequest:(AVAssetResourceLoadingRequest * _Nonnull)loadingRequest;
@end

@class VKPlaylist;
@class UIStoryboardSegue;
@class NSBundle;

/// Standard player view controller to which you play videos from V.
SWIFT_CLASS("_TtC14VideoKitPlayer22VKPlayerViewController")
@interface VKPlayerViewController : UIViewController
/// Indicates how video will occupy it’s place.
@property (nonatomic) enum VKAspectMode aspectMode;
/// Indicates  whether player is muted
@property (nonatomic) BOOL muted;
/// Indicates  whether player should loop video
@property (nonatomic) BOOL loop;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
/// Enable the showing of controls.  Default value is <code>true</code> to show controls.
@property (nonatomic) IBInspectable BOOL showControls;
/// Enable the showing of spinner when video is buffering.  Default value is <code>true</code>.
@property (nonatomic) IBInspectable BOOL showSpinner;
/// Enable the showing of error messages when video playback is failed.  Default value is <code>true</code>.
@property (nonatomic) IBInspectable BOOL showErrorMessages;
/// Show buttons controls or progress. Default value is <code>true</code>.
@property (nonatomic) IBInspectable BOOL showButtonsControls;
/// Indicates the current playlist of the player.  This property is read only and can be observed via KVO.
@property (nonatomic, readonly, strong) VKPlaylist * _Nullable playlist;
/// Indicates the current video index in the playlist.  This property is read only and can be observed via KVO.
@property (nonatomic, readonly) NSInteger playlistIndex;
/// Indicates the current video of the player.  This property is read only and can be observed via KVO.
@property (nonatomic, readonly, strong) VKVideo * _Nullable video;
/// Indicates the current state of the player.  This property is read only and can be observed via KVO.
@property (nonatomic, readonly) enum VKPlayState playState;
/// Indicates the current time position of the player.  This property is read only and can be observed via KVO.
@property (nonatomic, readonly) NSTimeInterval currentTime;
/// The duration of the current playing item.  If there’s no item to be played the value is 0.
@property (nonatomic, readonly) NSTimeInterval duration;
/// Indicates whether the current video is ready to play
@property (nonatomic, readonly) BOOL isReadyToPlay;
- (void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender;
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_PROTOCOL("_TtP14VideoKitPlayer20VKPlayerViewDelegate_")
@protocol VKPlayerViewDelegate
@optional
/// Called when the player is ready to play the video.
/// \param player The player that called this method.
///
- (void)vkPlayerViewReadyToPlay:(VKPlayerView * _Nonnull)player;
/// Called when the player is buffering.
/// \param player The player that called this method.
///
/// \param buffering If the value is <code>true</code> then the player is buffering.  When the player finishes buffering the delegate is called again with the value being <code>false</code>.
///
- (void)vkPlayerViewBuffering:(VKPlayerView * _Nonnull)player buffering:(BOOL)buffering;
/// Called when the current time of playback has changed.
/// \param player The player that called this method.
///
- (void)vkPlayerViewCurrentTimeChanged:(VKPlayerView * _Nonnull)player;
/// Called when the play state of the player has changed.
/// \param player The player that called this method.
///
- (void)vkPlayerViewPlayStateDidChange:(VKPlayerView * _Nonnull)player;
/// Called when player tried to play the video but fails.
/// \param player The player that called this method.
///
/// \param error The playback error
///
- (void)vkPlayerViewFailedToPlay:(VKPlayerView * _Nonnull)player error:(enum VKError)error;
/// Called when the player has finished playing the video.
/// \param player The player that called this method.
///
- (void)vkPlayerViewDidPlayToEnd:(VKPlayerView * _Nonnull)player;
@end


@interface VKPlayerViewController (SWIFT_EXTENSION(VideoKitPlayer)) <VKPlayerViewDelegate>
- (void)vkPlayerViewReadyToPlay:(VKPlayerView * _Nonnull)player;
- (void)vkPlayerViewDidPlayToEnd:(VKPlayerView * _Nonnull)player;
- (void)vkPlayerViewCurrentTimeChanged:(VKPlayerView * _Nonnull)player;
- (void)vkPlayerViewFailedToPlay:(VKPlayerView * _Nonnull)player error:(enum VKError)error;
- (void)vkPlayerViewBuffering:(VKPlayerView * _Nonnull)player buffering:(BOOL)buffering;
@end


/// A set of delegate to be called from VKPlayerViewController
SWIFT_PROTOCOL("_TtP14VideoKitPlayer30VKPlayerViewControllerDelegate_")
@protocol VKPlayerViewControllerDelegate
@optional
/// Called when the player is ready to play the video.
/// \param player The player that called this method.
///
- (void)vkPlayerViewControllerReadyToPlay:(VKPlayerViewController * _Nonnull)player;
/// Called when the player is buffering.
/// \param player The player that called this method.
///
/// \param buffering If the value is <code>true</code> then the player is buffering.  When the player finishes buffering the delegate is called again with the value being <code>false</code>.
///
- (void)vkPlayerViewControllerBuffering:(VKPlayerViewController * _Nonnull)player buffering:(BOOL)buffering;
/// Called when the current time of playback has changed.
/// \param player The player that called this method.
///
- (void)vkPlayerViewControllerCurrentTimeChanged:(VKPlayerViewController * _Nonnull)player;
/// Called when player tried to play an item but fails.
/// \param player The player that called this method.
///
/// \param error The playback error
///
- (void)vkPlayerViewControllerFailedToPlay:(VKPlayerViewController * _Nonnull)player error:(enum VKError)error;
/// Called when the player has finished playing the video.
/// \param player The player that called this method.
///
- (void)vkPlayerViewControllerDidPlayToEnd:(VKPlayerViewController * _Nonnull)player;
@end



SWIFT_CLASS("_TtC14VideoKitPlayer16VKPlayersManager")
@interface VKPlayersManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL("_TtP14VideoKitPlayer24VKPlayersManagerProtocol_")
@protocol VKPlayersManagerProtocol
@optional
/// Called when new player instance has been createde.
/// \param player New player instance.
///
- (void)vkPlayersManagerNewPlayerCreated:(VKPlayersManager * _Nonnull)manager :(VKPlayerViewController * _Nonnull)player;
/// Called when the manager preloaded video
/// \param videoId Video id that was preloaded.
///
- (void)vkPlayersManagerVideoPreloaded:(VKPlayersManager * _Nonnull)manager :(NSString * _Nonnull)videoId;
@end


/// Repeats a set of videos forever (ideally for use in a background view).
SWIFT_CLASS("_TtC14VideoKitPlayer13VKVideoLooper")
@interface VKVideoLooper : NSObject
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
