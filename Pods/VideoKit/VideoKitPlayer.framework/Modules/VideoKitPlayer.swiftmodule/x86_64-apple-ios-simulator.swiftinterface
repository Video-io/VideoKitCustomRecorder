// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 effective-4.1.50 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 4 -enforce-exclusivity=checked -O -module-name VideoKitPlayer
import AVFoundation
import AVKit
import CoreMedia
import Foundation
import MobileCoreServices
import Swift
import UIKit
import VideoKitCore
@_exported import VideoKitPlayer
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class VKPlayerView : UIKit.UIView {
  @objc weak public var delegate: VideoKitPlayer.VKPlayerViewDelegate?
  @objc public var playState: VideoKitPlayer.VKPlayState {
    @objc get
  }
  @objc public var aspectMode: VideoKitPlayer.VKAspectMode {
    @objc get
    @objc set
  }
  public var preferredVideoResolution: VideoKitCore.VKVideoResolution? {
    get
    set
  }
  @objc public var loop: Swift.Bool
  @objc public var muted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var currentTime: Foundation.TimeInterval {
    @objc get
  }
  @objc public var duration: Foundation.TimeInterval {
    @objc get
  }
  @objc public var video: VideoKitCore.VKVideo? {
    get
  }
  @objc public var isReadyToPlay: Swift.Bool {
    get
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic public func updateConstraints()
  @objc public func reset()
  @objc public func set(video: VideoKitCore.VKVideo)
  @objc public func play(video: VideoKitCore.VKVideo)
  @objc public func play()
  @objc public func pause()
  @objc public func stop()
  @objc public func seek(to: Foundation.TimeInterval)
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
extension VKPlayerView : AVFoundation.AVAssetResourceLoaderDelegate {
  @objc dynamic public func resourceLoader(_ resourceLoader: AVFoundation.AVAssetResourceLoader, shouldWaitForLoadingOfRequestedResource loadingRequest: AVFoundation.AVAssetResourceLoadingRequest) -> Swift.Bool
  @objc dynamic public func resourceLoader(_ resourceLoader: AVFoundation.AVAssetResourceLoader, didCancel loadingRequest: AVFoundation.AVAssetResourceLoadingRequest)
}
@objc public protocol VKPlayerViewDelegate : AnyObject {
  @objc optional func vkPlayerViewReadyToPlay(_ player: VideoKitPlayer.VKPlayerView)
  @objc optional func vkPlayerViewBuffering(_ player: VideoKitPlayer.VKPlayerView, buffering: Swift.Bool)
  @objc optional func vkPlayerViewCurrentTimeChanged(_ player: VideoKitPlayer.VKPlayerView)
  @objc optional func vkPlayerViewPlayStateDidChange(_ player: VideoKitPlayer.VKPlayerView)
  @objc optional func vkPlayerViewFailedToPlay(_ player: VideoKitPlayer.VKPlayerView, error: VideoKitCore.VKError)
  @objc optional func vkPlayerViewDidPlayToEnd(_ player: VideoKitPlayer.VKPlayerView)
}
@objc @_hasMissingDesignatedInitializers public class VKNoiseView : UIKit.UIImageView {
  public func show()
  public func hide()
  @objc deinit
  @objc override dynamic public init(image: UIKit.UIImage?)
  @available(iOS 3.0, *)
  @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
}
@objc public enum VKPlayState : Swift.Int {
  case unknown
  case pause
  case playing
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum VKAspectMode : Swift.Int {
  case resizeAspect
  case resizeAspectFill
  case resize
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum VKPlayerTransition {
  case up(_: Foundation.TimeInterval)
  case down(_: Foundation.TimeInterval)
  case left(_: Foundation.TimeInterval)
  case right(_: Foundation.TimeInterval)
  case fade(_: Foundation.TimeInterval)
}
@_inheritsConvenienceInitializers @objc open class VKPlayerViewController : UIKit.UIViewController {
  @objc dynamic open var aspectMode: VideoKitPlayer.VKAspectMode {
    @objc get
    @objc set
  }
  open var preferredVideoResolution: VideoKitCore.VKVideoResolution? {
    get
    set
  }
  @objc dynamic open var muted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic open var loop: Swift.Bool {
    @objc get
    @objc set
  }
  weak open var delegate: VideoKitPlayer.VKPlayerViewControllerDelegate?
  @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @objc @IBInspectable open var showControls: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var showSpinner: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var showErrorMessages: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var showButtonsControls: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic open var playlist: VideoKitCore.VKPlaylist? {
    @objc get
  }
  @objc dynamic open var playlistIndex: Swift.Int {
    @objc get
  }
  @objc dynamic open var video: VideoKitCore.VKVideo? {
    @objc get
  }
  @objc dynamic open var playState: VideoKitPlayer.VKPlayState {
    get
  }
  @objc dynamic open var currentTime: Swift.Double {
    get
  }
  @objc dynamic open var duration: Swift.Double {
    get
  }
  @objc open var isReadyToPlay: Swift.Bool {
    @objc get
  }
  @objc override dynamic open func prepare(for segue: UIKit.UIStoryboardSegue, sender: Any?)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func didReceiveMemoryWarning()
  public func reset()
  public func set(video: VideoKitCore.VKVideo, _ transition: VideoKitPlayer.VKPlayerTransition? = nil)
  public func set(playlist: VideoKitCore.VKPlaylist, atIndex index: Swift.Int = 0, _ transition: VideoKitPlayer.VKPlayerTransition? = nil)
  public func set(playlistIndex index: Swift.Int, _ transition: VideoKitPlayer.VKPlayerTransition? = nil)
  public func play(video: VideoKitCore.VKVideo, _ transition: VideoKitPlayer.VKPlayerTransition? = nil)
  public func play(playlist: VideoKitCore.VKPlaylist, atIndex index: Swift.Int = 0, _ transition: VideoKitPlayer.VKPlayerTransition? = nil)
  public func play(playlistIndex index: Swift.Int, _ transition: VideoKitPlayer.VKPlayerTransition? = nil)
  public func play()
  public func pause()
  public func seek(to time: Foundation.TimeInterval)
  public func addGestureRecognizer(gestureRecognizer: UIKit.UIGestureRecognizer)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension VKPlayerViewController {
  public func playbackQueueUpdated(videos: [VideoKitCore.VKVideo])
}
extension VKPlayerViewController : VideoKitPlayer.VKPlayerViewDelegate {
  public func vkPlayerViewPlaybackStateDidChange(_ player: VideoKitPlayer.VKPlayerView)
  @objc dynamic public func vkPlayerViewReadyToPlay(_ player: VideoKitPlayer.VKPlayerView)
  @objc dynamic public func vkPlayerViewDidPlayToEnd(_ player: VideoKitPlayer.VKPlayerView)
  @objc dynamic public func vkPlayerViewCurrentTimeChanged(_ player: VideoKitPlayer.VKPlayerView)
  @objc dynamic public func vkPlayerViewFailedToPlay(_ player: VideoKitPlayer.VKPlayerView, error: VideoKitCore.VKError)
  @objc dynamic public func vkPlayerViewBuffering(_ player: VideoKitPlayer.VKPlayerView, buffering: Swift.Bool)
}
@objc public protocol VKPlayerViewControllerDelegate : AnyObject {
  @objc optional func vkPlayerViewControllerReadyToPlay(_ player: VideoKitPlayer.VKPlayerViewController)
  @objc optional func vkPlayerViewControllerBuffering(_ player: VideoKitPlayer.VKPlayerViewController, buffering: Swift.Bool)
  @objc optional func vkPlayerViewControllerCurrentTimeChanged(_ player: VideoKitPlayer.VKPlayerViewController)
  @objc optional func vkPlayerViewControllerFailedToPlay(_ player: VideoKitPlayer.VKPlayerViewController, error: VideoKitCore.VKError)
  @objc optional func vkPlayerViewControllerDidPlayToEnd(_ player: VideoKitPlayer.VKPlayerViewController)
}
@objc public class VKPlayersManager : ObjectiveC.NSObject {
  weak public var delegate: VideoKitPlayer.VKPlayersManagerProtocol?
  public typealias PlayerRequestCompletion = (VideoKitPlayer.VKPlayerViewController?, VideoKitPlayer.VKPlayersManager.Error?) -> Swift.Void
  public var playlist: VideoKitCore.VKPlaylist? {
    get
  }
  public var playlistIndex: Swift.Int {
    get
  }
  public init(prerenderDistance: Swift.Int = 5, preloadDistance: Swift.Int = 10)
  public func reset()
  public func addVideoToPlaylist(_ video: VideoKitCore.VKVideo)
  public func setPlaylist(_ playlist: VideoKitCore.VKPlaylist, index: Swift.Int = 0)
  public func setPlaylistIndex(_ index: Swift.Int)
  public func getPlayerFor(index: Swift.Int, completion: @escaping VideoKitPlayer.VKPlayersManager.PlayerRequestCompletion)
  public func getPlayerFor(videoId: Swift.String, completion: @escaping VideoKitPlayer.VKPlayersManager.PlayerRequestCompletion)
  public func releasePlayerFor(id: Swift.String)
  public func releasePlayers()
  public func pausePlayers()
  public func playbackQueueUpdated(videos: [VideoKitCore.VKVideo])
  @objc deinit
  @objc override dynamic public init()
}
@objc public protocol VKPlayersManagerProtocol : AnyObject {
  @objc optional func vkPlayersManagerNewPlayerCreated(_ manager: VideoKitPlayer.VKPlayersManager, _ player: VideoKitPlayer.VKPlayerViewController)
  @objc optional func vkPlayersManagerVideoPreloaded(_ manager: VideoKitPlayer.VKPlayersManager, _ videoId: Swift.String)
}
extension VKPlayersManager {
  public enum Error {
    case indexOutOfRange
    case videoIdNotFound
    public var localizedDescription: Swift.String {
      get
    }
    public static func == (a: VideoKitPlayer.VKPlayersManager.Error, b: VideoKitPlayer.VKPlayersManager.Error) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
}
@_hasMissingDesignatedInitializers public class VKPlayerCache {
  public static let shared: VideoKitPlayer.VKPlayerCache
  public var cacheSize: Swift.Int {
    get
    set
  }
  public var videoPreloadingThreshold: Swift.Double {
    get
    set
  }
  @objc open func didReceiveMemoryWarning()
  public func preload(video: VideoKitCore.VKVideo, completion: @escaping (Swift.Bool, VideoKitCore.VKError?) -> Swift.Void) -> VideoKitCore.VKCancellable?
  public func isPreloaded(video: VideoKitCore.VKVideo) -> Swift.Bool
  public func clearCache()
  public func clearCacheFor(video: VideoKitCore.VKVideo)
  @objc deinit
}
public protocol VKVideoLooperProtocol {
  init(assets: [AVFoundation.AVAsset])
  func start(in layer: QuartzCore.CALayer)
  func stop()
}
@objc public class VKVideoLooper : ObjectiveC.NSObject, VideoKitPlayer.VKVideoLooperProtocol {
  public var isPlaying: Swift.Bool
  required public init(assets: [AVFoundation.AVAsset])
  public func start(in layer: QuartzCore.CALayer)
  public func setAssets(assets: [AVFoundation.AVAsset])
  public func stop()
  public func toggle()
  public func play()
  public func pause()
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc deinit
  @objc override dynamic public init()
}
extension UIImageView {
  public func setThumb(for video: VideoKitCore.VKVideo, block: @escaping (UIKit.UIImageView) -> Swift.Bool)
}
extension VideoKitPlayer.VKPlayState : Swift.Equatable {}
extension VideoKitPlayer.VKPlayState : Swift.Hashable {}
extension VideoKitPlayer.VKPlayState : Swift.RawRepresentable {}
extension VideoKitPlayer.VKAspectMode : Swift.Equatable {}
extension VideoKitPlayer.VKAspectMode : Swift.Hashable {}
extension VideoKitPlayer.VKAspectMode : Swift.RawRepresentable {}
extension VideoKitPlayer.VKPlayersManager.Error : Swift.Equatable {}
extension VideoKitPlayer.VKPlayersManager.Error : Swift.Hashable {}
