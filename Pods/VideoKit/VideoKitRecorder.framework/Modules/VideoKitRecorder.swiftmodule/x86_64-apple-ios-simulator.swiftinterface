// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VideoKitRecorder
import AVFoundation
import CoreImage
import CoreMedia
import CoreVideo
import Foundation
import ImageIO
import Metal
import MobileCoreServices
import Swift
import UIKit
import VideoKitCore
import VideoKitPlayer
extension VKRecorderViewController : VideoKitRecorder.VKRecorderDelegate {
  @objc dynamic open func vkRecorderDidFinishUploadWhileRecording(_ video: VideoKitCore.VKVideo, _ session: VideoKitRecorder.VKRecorderSession)
  final public func vkRecorderDidFinishAutoMerge(_ url: Foundation.URL, _ session: VideoKitRecorder.VKRecorderSession)
  final public func vkRecorderDidFinishAutoMergeWithError(_ error: Swift.Error, _ session: VideoKitRecorder.VKRecorderSession)
  @objc dynamic open func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didUpdateVideoConfiguration videoConfiguration: VideoKitRecorder.VKRecorderVideoConfiguration)
  @objc dynamic open func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didUpdateAudioConfiguration audioConfiguration: VideoKitRecorder.VKRecorderAudioConfiguration)
  @objc dynamic open func vkRecorderSessionWillStart(_ vkRecorder: VideoKitRecorder.VKRecorder)
  @objc dynamic open func vkRecorderSessionDidStart(_ vkRecorder: VideoKitRecorder.VKRecorder)
  @objc dynamic open func vkRecorderSessionDidStop(_ vkRecorder: VideoKitRecorder.VKRecorder)
  @objc dynamic open func vkRecorderSessionWasInterrupted(_ vkRecorder: VideoKitRecorder.VKRecorder)
  @objc dynamic open func vkRecorderSessionInterruptionEnded(_ vkRecorder: VideoKitRecorder.VKRecorder)
  @objc dynamic open func vkRecorderCaptureModeWillChange(_ vkRecorder: VideoKitRecorder.VKRecorder)
  @objc dynamic open func vkRecorderCaptureModeDidChange(_ vkRecorder: VideoKitRecorder.VKRecorder)
}
public enum VKRecorderAuthorizationStatus : Swift.Int, Swift.CustomStringConvertible {
  case notDetermined
  case notAuthorized
  case authorized
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum VKRecorderDeviceType : Swift.Int, Swift.CustomStringConvertible {
  case microphone
  case wideAngleCamera
  case telephotoCamera
  case duoCamera
  public var avfoundationType: AVFoundation.AVCaptureDevice.DeviceType {
    get
  }
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum VKRecorderCaptureMode : Swift.Int, Swift.CustomStringConvertible {
  case video
  case photo
  case audio
  case videoWithoutAudio
  case arKit
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum VKRecorderMirroringMode : Swift.Int, Swift.CustomStringConvertible {
  case off
  case on
  case auto
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public let VKRecorderErrorDomain: Swift.String
public enum VKRecorderError : Swift.Error, Swift.CustomStringConvertible {
  case unknown
  case clipsEmpty
  case started
  case deviceNotAvailable
  case authorization
  case fileExists
  case nothingRecorded
  case notReadyToRecord
  public var description: Swift.String {
    get
  }
  public static func == (a: VideoKitRecorder.VKRecorderError, b: VideoKitRecorder.VKRecorderError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers public class VKRecorder : ObjectiveC.NSObject {
  weak public var delegate: VideoKitRecorder.VKRecorderDelegate?
  weak public var previewDelegate: VideoKitRecorder.VKRecorderPreviewDelegate?
  weak public var deviceDelegate: VideoKitRecorder.VKRecorderDeviceDelegate?
  weak public var flashDelegate: VideoKitRecorder.VKRecorderFlashAndTorchDelegate?
  weak public var videoDelegate: VideoKitRecorder.VKRecorderVideoDelegate?
  weak public var photoDelegate: VideoKitRecorder.VKRecorderPhotoDelegate?
  weak public var portraitEffectsMatteDelegate: VideoKitRecorder.VKRecorderPortraitEffectsMatteDelegate?
  weak public var metadataObjectsDelegate: VideoKitRecorder.VKRecorderMetadataOutputObjectsDelegate?
  public var previewLayer: AVFoundation.AVCaptureVideoPreviewLayer
  public var videoConfiguration: VideoKitRecorder.VKRecorderVideoConfiguration
  public var audioConfiguration: VideoKitRecorder.VKRecorderAudioConfiguration
  public var photoConfiguration: VideoKitRecorder.VKRecorderPhotoConfiguration
  @available(iOS 11.0, *)
  public var arConfiguration: VideoKitRecorder.VKRecorderARConfiguration? {
    get
  }
  public var automaticallyConfiguresApplicationAudioSession: Swift.Bool
  public var captureMode: VideoKitRecorder.VKRecorderCaptureMode {
    get
    set
  }
  public var devicePosition: AVFoundation.AVCaptureDevice.Position {
    get
    set
  }
  public var automaticallyUpdatesDeviceOrientation: Swift.Bool
  public var deviceOrientation: AVFoundation.AVCaptureVideoOrientation {
    get
    set
  }
  public var photoStabilizationEnabled: Swift.Bool
  public var videoStabilizationMode: AVFoundation.AVCaptureVideoStabilizationMode {
    get
    set
  }
  public var portraitEffectsMatteCaptureEnabled: Swift.Bool
  public var metadataObjectTypes: [AVFoundation.AVMetadataObject.ObjectType]?
  public var isRecording: Swift.Bool {
    get
  }
  public var isRunning: Swift.Bool {
    get
  }
  public var session: VideoKitRecorder.VKRecorderSession? {
    get
  }
  public static let shared: VideoKitRecorder.VKRecorder
  @objc override dynamic public init()
  @objc deinit
}
extension VKRecorder {
  public static func authorizationStatus(forMediaType mediaType: AVFoundation.AVMediaType) -> VideoKitRecorder.VKRecorderAuthorizationStatus
  public static func requestAuthorization(forMediaType mediaType: AVFoundation.AVMediaType, completionHandler: ((AVFoundation.AVMediaType, VideoKitRecorder.VKRecorderAuthorizationStatus) -> Swift.Void)? = nil)
}
extension VKRecorder {
  public func startSession() throws
  public func endSession()
}
extension VKRecorder {
}
extension VKRecorder {
  public func freezePreview()
  public func unfreezePreview()
}
extension VKRecorder {
  public func flipCaptureDevicePosition()
  public func changeCaptureDeviceIfAvailable(captureDevice: VideoKitRecorder.VKRecorderDeviceType) throws
}
extension VKRecorder {
  public var mirroringMode: VideoKitRecorder.VKRecorderMirroringMode {
    get
    set
  }
}
extension VKRecorder {
  public var isFlashAvailable: Swift.Bool {
    get
  }
  public var flashMode: AVFoundation.AVCaptureDevice.FlashMode {
    get
    set
  }
  public var isTorchAvailable: Swift.Bool {
    get
  }
  public var torchMode: AVFoundation.AVCaptureDevice.TorchMode {
    get
    set
  }
}
extension VKRecorder {
  public var isFocusPointOfInterestSupported: Swift.Bool {
    get
  }
  public var isFocusLockSupported: Swift.Bool {
    get
  }
  public var isAdjustingFocus: Swift.Bool {
    get
  }
  public var focusMode: AVFoundation.AVCaptureDevice.FocusMode {
    get
    set
  }
  public var lensPosition: Swift.Float {
    get
    set
  }
  public func focusExposeAndAdjustWhiteBalance(atAdjustedPoint adjustedPoint: CoreGraphics.CGPoint)
  public func focusAtAdjustedPointOfInterest(adjustedPoint: CoreGraphics.CGPoint)
  public var isExposureLockSupported: Swift.Bool {
    get
  }
  public var isAdjustingExposure: Swift.Bool {
    get
  }
  public var exposureMode: AVFoundation.AVCaptureDevice.ExposureMode {
    get
    set
  }
  public func exposeAtAdjustedPointOfInterest(adjustedPoint: CoreGraphics.CGPoint)
  public func expose(withDuration duration: Swift.Double, durationPower: Swift.Double = 5, minDurationRangeLimit: Swift.Double = (1.0 / 1000.0))
  public func expose(withISO iso: Swift.Float)
  public func expose(withTargetBias targetBias: Swift.Float)
  public var isWhiteBalanceLockSupported: Swift.Bool {
    get
  }
  public var isAdjustingWhiteBalance: Swift.Bool {
    get
  }
  public var whiteBalanceMode: AVFoundation.AVCaptureDevice.WhiteBalanceMode {
    get
    set
  }
  public var whiteBalanceTemperature: Swift.Float {
    get
    set
  }
  public var whiteBalanceTint: Swift.Float {
    get
    set
  }
  public func adjustWhiteBalanceGains(_ whiteBalanceGains: AVFoundation.AVCaptureDevice.WhiteBalanceGains)
}
extension VKRecorder {
  public var frameRate: CoreMedia.CMTimeScale {
    get
    set
  }
  public func updateDeviceFormat(withFrameRate frameRate: CoreMedia.CMTimeScale, dimensions: CoreMedia.CMVideoDimensions)
}
extension VKRecorder {
  public var isVideoCaptureSupported: Swift.Bool {
    get
  }
  public var canCaptureVideo: Swift.Bool {
    get
  }
  public var videoZoomFactor: Swift.Float {
    get
    set
  }
  public func capturePhotoFromVideo()
  public var isVideoCustomContextRenderingEnabled: Swift.Bool {
    get
    set
  }
  public var videoCustomContextImageBuffer: CoreVideo.CVPixelBuffer? {
    get
    set
  }
  public func record()
  public func pause(withCompletionHandler completionHandler: (() -> Swift.Void)? = nil)
  public func stop(withCompletionHandler completionHandler: (() -> Swift.Void)? = nil)
}
extension VKRecorder {
  public var canCapturePhoto: Swift.Bool {
    get
  }
  public func capturePhoto()
}
extension VKRecorder : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate, AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegate {
  @objc dynamic public func captureOutput(_ captureOutput: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
extension VKRecorder : AVFoundation.AVCaptureFileOutputRecordingDelegate {
  @objc dynamic public func fileOutput(_ output: AVFoundation.AVCaptureFileOutput, didStartRecordingTo fileURL: Foundation.URL, from connections: [AVFoundation.AVCaptureConnection])
  @objc dynamic public func fileOutput(_ output: AVFoundation.AVCaptureFileOutput, didFinishRecordingTo outputFileURL: Foundation.URL, from connections: [AVFoundation.AVCaptureConnection], error: Swift.Error?)
}
extension VKRecorder : AVFoundation.AVCapturePhotoCaptureDelegate {
  @objc dynamic public func photoOutput(_ captureOutput: AVFoundation.AVCapturePhotoOutput, willCapturePhotoFor resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings)
  @objc dynamic public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didCapturePhotoFor resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings)
  @objc dynamic public func photoOutput(_ captureOutput: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photoSampleBuffer: CoreMedia.CMSampleBuffer?, previewPhoto previewPhotoSampleBuffer: CoreMedia.CMSampleBuffer?, resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings, bracketSettings: AVFoundation.AVCaptureBracketedStillImageSettings?, error: Swift.Error?)
  @objc dynamic public func photoOutput(_ captureOutput: AVFoundation.AVCapturePhotoOutput, didFinishProcessingRawPhoto rawSampleBuffer: CoreMedia.CMSampleBuffer?, previewPhoto previewPhotoSampleBuffer: CoreMedia.CMSampleBuffer?, resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings, bracketSettings: AVFoundation.AVCaptureBracketedStillImageSettings?, error: Swift.Error?)
  @objc dynamic public func photoOutput(_ captureOutput: AVFoundation.AVCapturePhotoOutput, didFinishCaptureFor resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings, error: Swift.Error?)
  @objc dynamic public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photo: AVFoundation.AVCapturePhoto, error: Swift.Error?)
}
extension VKRecorder {
  public func finalizeUploadWhileRecording()
}
extension VKRecorder : AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  @objc dynamic public func metadataOutput(_ output: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from connection: AVFoundation.AVCaptureConnection)
}
extension VKRecorder {
  @objc dynamic public func handleSessionWasInterrupted(_ notification: Foundation.Notification)
  @objc dynamic public func handleSessionInterruptionEnded(_ notification: Foundation.Notification)
}
extension AVCaptureConnection {
  public class func connection(withMediaType mediaType: AVFoundation.AVMediaType, fromConnections connections: [AVFoundation.AVCaptureConnection]) -> AVFoundation.AVCaptureConnection?
}
extension AVCaptureDeviceInput {
  public class func deviceInput(withMediaType mediaType: AVFoundation.AVMediaType, captureSession: AVFoundation.AVCaptureSession) -> AVFoundation.AVCaptureDeviceInput?
}
extension AVCaptureDevice {
  public class func captureDevice(withType deviceType: AVFoundation.AVCaptureDevice.DeviceType, forPosition position: AVFoundation.AVCaptureDevice.Position) -> AVFoundation.AVCaptureDevice?
  public class func wideAngleVideoDevice(forPosition position: AVFoundation.AVCaptureDevice.Position) -> AVFoundation.AVCaptureDevice?
  public class func telephotoVideoDevice(forPosition position: AVFoundation.AVCaptureDevice.Position) -> AVFoundation.AVCaptureDevice?
  public class func primaryVideoDevice(forPosition position: AVFoundation.AVCaptureDevice.Position) -> AVFoundation.AVCaptureDevice?
  public class func videoDevice() -> AVFoundation.AVCaptureDevice?
  public class func audioDevice() -> AVFoundation.AVCaptureDevice?
  public func focalLengthAndPrinciplePoint(focalLengthX: inout Swift.Float, focalLengthY: inout Swift.Float, principlePointX: inout Swift.Float, principlePointY: inout Swift.Float)
}
extension AVCaptureDevice.Format {
  public class func maxFrameRate(forFormat format: AVFoundation.AVCaptureDevice.Format, minFrameRate: CoreMedia.CMTimeScale) -> CoreMedia.CMTimeScale
  public func isSupported(withFrameRate frameRate: CoreMedia.CMTimeScale, dimensions: CoreMedia.CMVideoDimensions = CMVideoDimensions(width: 0, height: 0)) -> Swift.Bool
}
extension AVCaptureDevice.Position {
  public var isCameraDevicePositionAvailable: Swift.Bool {
    get
  }
}
extension VKRecorderViewController {
  public func showSpinner(onView: UIKit.UIView)
}
extension VKRecorderViewController : VideoKitRecorder.VKCountdownTimerDelegate {
  @objc dynamic public func timerDidStart(sender: VideoKitRecorder.VKCountdownTimerView)
  @objc dynamic public func timerDidEnd(sender: VideoKitRecorder.VKCountdownTimerView, elapsedTime: Foundation.TimeInterval)
  @objc dynamic public func timerDidUpdateCounterValue(sender: VideoKitRecorder.VKCountdownTimerView, newValue: Swift.Int)
}
extension CIContext {
  public func uiimage(withSampleBuffer sampleBuffer: CoreMedia.CMSampleBuffer) -> UIKit.UIImage?
  public func uiimage(withPixelBuffer pixelBuffer: CoreVideo.CVPixelBuffer) -> UIKit.UIImage?
  @available(iOS 11.0, *)
  public func createPixelBuffer(fromPixelBuffer pixelBuffer: CoreVideo.CVPixelBuffer, withOrientation orientation: ImageIO.CGImagePropertyOrientation, pixelBufferPool: CoreVideo.CVPixelBufferPool) -> CoreVideo.CVPixelBuffer?
}
public protocol VKImagePickerDelegate : AnyObject {
  func didSelect(image: UIKit.UIImage?)
  func didSelectVideo(url: Foundation.URL?)
}
@objc open class VKImagePicker : ObjectiveC.NSObject {
  final public let pickerController: UIKit.UIImagePickerController
  public init(presentationController: UIKit.UIViewController, delegate: VideoKitRecorder.VKImagePickerDelegate, mediaType: Swift.String)
  public func present(from sourceView: UIKit.UIView)
  @objc deinit
  @objc override dynamic public init()
}
extension VKImagePicker : UIKit.UIImagePickerControllerDelegate {
  @objc dynamic public func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
  @objc dynamic public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
}
extension VKImagePicker : UIKit.UINavigationControllerDelegate {
}
@objc public protocol VKRearrangableStackViewDelegate {
  @objc optional func stackViewDidBeginReordering(_ stackView: VideoKitRecorder.VKRearrangableStackView)
  @objc optional func stackView(_ stackView: VideoKitRecorder.VKRearrangableStackView, didDragToReorderInForwardDirection forward: Swift.Bool, maxPoint: CoreGraphics.CGPoint, minPoint: CoreGraphics.CGPoint)
  @objc optional func stackViewDidReorderArrangedSubviews(_ stackView: VideoKitRecorder.VKRearrangableStackView, reorderedView: UIKit.UIView, fromIndex: Swift.Int, toIndex: Swift.Int)
  @objc optional func stackViewDidEndReordering(_ stackView: VideoKitRecorder.VKRearrangableStackView)
  @objc optional func stackViewDidCancelReordering(_ stackView: VideoKitRecorder.VKRearrangableStackView)
  @objc optional func stackView(_ stackView: VideoKitRecorder.VKRearrangableStackView, canReorderSubview subview: UIKit.UIView, atIndex index: Swift.Int) -> Swift.Bool
  @objc optional func stackView(_ stackView: VideoKitRecorder.VKRearrangableStackView, shouldAllowSubview subview: UIKit.UIView, toMoveToIndex index: Swift.Int) -> Swift.Bool
}
@objc public class VKRearrangableStackView : UIKit.UIStackView, UIKit.UIGestureRecognizerDelegate {
  public var reorderingEnabled: Swift.Bool {
    get
    set
  }
  public var delegate: VideoKitRecorder.VKRearrangableStackViewDelegate?
  @available(*, deprecated)
  public var clipsToBoundsWhileReordering: Swift.Bool
  public var temporaryViewScale: CoreGraphics.CGFloat
  public var otherViewsScale: CoreGraphics.CGFloat
  public var temporaryViewAlpha: CoreGraphics.CGFloat
  public var dragHintSpacing: CoreGraphics.CGFloat
  public var longPressMinimumPressDuration: Swift.Double {
    get
    set
  }
  public var isHorizontal: Swift.Bool {
    get
  }
  public var isVertical: Swift.Bool {
    get
  }
  @objc dynamic public init()
  @objc required dynamic public init(coder: Foundation.NSCoder)
  @objc override dynamic public func addArrangedSubview(_ view: UIKit.UIView)
  public func prepareForReordering()
  public func cleanupUpAfterReordering()
  @objc override dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VKVideoCropView : UIKit.UIView {
  public var asset: AVFoundation.AVAsset? {
    get
    set
  }
  public var aspectRatio: CoreGraphics.CGSize {
    get
  }
  public var player: AVFoundation.AVPlayer? {
    get
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public func setAspectRatio(_ aspectRatio: CoreGraphics.CGSize, animated: Swift.Bool)
  public func getImageCropFrame() -> CoreGraphics.CGRect
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class VKFocusIndicatorView : UIKit.UIView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension VKFocusIndicatorView {
  public func startAnimation()
  public func stopAnimation()
}
@_inheritsConvenienceInitializers @objc public class VKRecordButton : UIKit.UIControl {
  public var mainColor: UIKit.UIColor {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc override dynamic public func didMoveToSuperview()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension VKRecordButton {
  public func showStopIndicator()
  public func hideStopIndicator()
  public func startRecordingAnimation()
  public func stopRecordingAnimation()
}
public typealias VKTrimmerCompletion = (Foundation.URL) -> Swift.Void
public protocol VKTrimmerProtocol {
  func trim(videoFile url: Foundation.URL, startTime start: Swift.Double, endTime end: Swift.Double, completion: (VideoKitRecorder.VKTrimmerCompletion)?)
}
extension CMSampleBuffer {
  public class func createSampleBuffer(fromSampleBuffer sampleBuffer: CoreMedia.CMSampleBuffer, withTimeOffset timeOffset: CoreMedia.CMTime, duration: CoreMedia.CMTime?) -> CoreMedia.CMSampleBuffer?
}
@objc public protocol VKCountdownTimerDelegate : AnyObject {
  @objc optional func timerDidUpdateCounterValue(sender: VideoKitRecorder.VKCountdownTimerView, newValue: Swift.Int)
  @objc optional func timerDidStart(sender: VideoKitRecorder.VKCountdownTimerView)
  @objc optional func timerDidPause(sender: VideoKitRecorder.VKCountdownTimerView)
  @objc optional func timerDidResume(sender: VideoKitRecorder.VKCountdownTimerView)
  @objc optional func timerDidEnd(sender: VideoKitRecorder.VKCountdownTimerView, elapsedTime: Foundation.TimeInterval)
}
@objc @_inheritsConvenienceInitializers public class VKCountdownTimerView : UIKit.UIView {
  @objc @IBInspectable public var lineWidth: CoreGraphics.CGFloat
  @objc @IBInspectable public var lineColor: UIKit.UIColor
  @objc @IBInspectable public var trailLineColor: UIKit.UIColor
  @objc @IBInspectable public var isLabelHidden: Swift.Bool
  @objc @IBInspectable public var labelFont: UIKit.UIFont?
  @objc @IBInspectable public var labelTextColor: UIKit.UIColor?
  @objc @IBInspectable public var timerFinishingText: Swift.String?
  weak public var delegate: VideoKitRecorder.VKCountdownTimerDelegate?
  public var useMinutesAndSecondsRepresentation: Swift.Bool
  public var moveClockWise: Swift.Bool
  public var isActive: Swift.Bool
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  public func start(beginingValue: Swift.Int, interval: Foundation.TimeInterval = 1)
  public func pause()
  public func resume()
  public func reset()
  public func end()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class VKCaptureVideoPreviewLayer : AVFoundation.AVCaptureVideoPreviewLayer {
  @objc deinit
  @objc override dynamic public init(session: AVFoundation.AVCaptureSession)
  @available(iOS 8.0, *)
  @objc override dynamic public init(sessionWithNoConnection session: AVFoundation.AVCaptureSession)
  @objc override dynamic public init()
  @objc override dynamic public init(layer: Any)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol VKRecorderViewControllerDelegate {
  func willStartCamera(_ recorder: VideoKitRecorder.VKRecorder)
  func didStartCamera(_ recorder: VideoKitRecorder.VKRecorder)
  func willStartRecording(_ recorder: VideoKitRecorder.VKRecorder)
  func didStartRecording(_ recorder: VideoKitRecorder.VKRecorder)
  func didPauseRecording(clip: VideoKitRecorder.VKRecorderClip, recorder: VideoKitRecorder.VKRecorder)
  func didSetupUI()
  func didSetupRecordButton(button: VideoKitRecorder.VKRecordButton)
  func shouldStartRecording(button: VideoKitRecorder.VKRecordButton) -> Swift.Bool
  func didSelectVideoFromCameraRoll(videoUrl: Foundation.URL)
  func didSelectImageFromCameraRoll(image: UIKit.UIImage)
  func configure(video: VideoKitRecorder.VKRecorderVideoConfiguration, audio: VideoKitRecorder.VKRecorderAudioConfiguration)
  func didTapNextButton(_ recorder: VideoKitRecorder.VKRecorder)
  func didFinishMergingClips(_ recorder: VideoKitRecorder.VKRecorder, mergedClipUrl: Foundation.URL, autoMerged: Swift.Bool)
  func didFailMergingClips(_ recorder: VideoKitRecorder.VKRecorder, error: Swift.Error, autoMerged: Swift.Bool)
  func didSelectRecordingLength(_ recordingLength: VideoKitRecorder.VKRecordingLength, picker: VideoKitRecorder.VKHorizontalPicker)
  func didExit(_ recorder: VideoKitRecorder.VKRecorder, recordingViewController: VideoKitRecorder.VKRecorderViewController)
  func exitMenuDidTapStartOver(_ recorder: VideoKitRecorder.VKRecorder)
  func exitMenuDidTapExit(_ recorder: VideoKitRecorder.VKRecorder)
}
extension VKRecorderViewControllerDelegate {
  public func willStartCamera(_ recorder: VideoKitRecorder.VKRecorder)
  public func didStartCamera(_ recorder: VideoKitRecorder.VKRecorder)
  public func willStartRecording(_ recorder: VideoKitRecorder.VKRecorder)
  public func didStartRecording(_ recorder: VideoKitRecorder.VKRecorder)
  public func didPauseRecording(clip: VideoKitRecorder.VKRecorderClip, recorder: VideoKitRecorder.VKRecorder)
  public func didSetupUI()
  public func didSetupRecordButton(button: VideoKitRecorder.VKRecordButton)
  public func shouldStartRecording(button: VideoKitRecorder.VKRecordButton) -> Swift.Bool
  public func configure(video: VideoKitRecorder.VKRecorderVideoConfiguration, audio: VideoKitRecorder.VKRecorderAudioConfiguration)
  public func didTapNextButton(_ recorder: VideoKitRecorder.VKRecorder)
  public func didFinishMergingClips(_ recorder: VideoKitRecorder.VKRecorder, mergedClipUrl: Foundation.URL)
  public func didFailMergingClips(_ recorder: VideoKitRecorder.VKRecorder, error: Swift.Error)
  public func didExit(_ recorder: VideoKitRecorder.VKRecorder, recordingViewController: VideoKitRecorder.VKRecorderViewController)
  public func exitMenuDidTapStartOver(_ recorder: VideoKitRecorder.VKRecorder)
  public func exitMenuDidTapExit(_ recorder: VideoKitRecorder.VKRecorder)
  public func didSelectRecordingLength(_ recordingLength: VideoKitRecorder.VKRecordingLength, picker: VideoKitRecorder.VKHorizontalPicker)
  public func didSelectImageFromCameraRoll(image: UIKit.UIImage)
  public func didSelectVideoFromCameraRoll(videoUrl: Foundation.URL)
}
public protocol VKRecorderViewControllerDataSource {
  func shouldShowRecordButton() -> Swift.Bool
  func shouldShowTimeSelector() -> Swift.Bool
  func shouldShowFlashButton() -> Swift.Bool
  func shouldShowTimerButton() -> Swift.Bool
  func shouldShowPhotoLibraryButton() -> Swift.Bool
  func shouldShowFlipCameraButton() -> Swift.Bool
  func shouldMergeClipsOnNextButtonTap() -> Swift.Bool
  func shouldEnableUploadWhileRecording() -> Swift.Bool
  func exitMenuStartOverString() -> Swift.String
  func exitMenuCancelString() -> Swift.String
  func exitMenuExitString() -> Swift.String
  func pickerViewItems() -> [VideoKitRecorder.VKRecordingLength]
}
@_hasMissingDesignatedInitializers @objc public class VKRecordingLength : ObjectiveC.NSObject {
  public var name: Swift.String
  public var seconds: Swift.Double
  @objc deinit
  @objc override dynamic public init()
}
extension VKRecorderViewControllerDataSource {
  public func pickerViewItems() -> [VideoKitRecorder.VKRecordingLength]
  public func exitMenuStartOverString() -> Swift.String
  public func exitMenuCancelString() -> Swift.String
  public func exitMenuExitString() -> Swift.String
  public func shouldMergeClipsOnNextButtonTap() -> Swift.Bool
  public func shouldShowFlipCameraButton() -> Swift.Bool
  public func shouldShowRecordButton() -> Swift.Bool
  public func shouldShowTimeSelector() -> Swift.Bool
  public func shouldShowFlashButton() -> Swift.Bool
  public func shouldShowTimerButton() -> Swift.Bool
  public func shouldShowPhotoLibraryButton() -> Swift.Bool
  public func shouldEnableUploadWhileRecording() -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc open class VKRecorderViewController : UIKit.UIViewController {
  public var delegate: VideoKitRecorder.VKRecorderViewControllerDelegate?
  public var recorderDelegate: VideoKitRecorder.VKRecorderDelegate?
  public var dataSource: VideoKitRecorder.VKRecorderViewControllerDataSource
  public var recordingTime: Swift.Double {
    get
    set
  }
  public var countdownTimer: VideoKitRecorder.VKCountdownTimerView
  public var removeButton: UIKit.UIButton
  public var photoLibaryButton: UIKit.UIButton
  public var flipCameraButton: UIKit.UIButton
  public var bottomBackgroundView: UIKit.UIView
  public var timeSelector: VideoKitRecorder.VKHorizontalPicker
  public var vkRecorder: VideoKitRecorder.VKRecorder
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol VKEditorViewControllerDelegate {
  func didTapDone()
  func didTapAbort()
  func didTapPlayer(player: AVFoundation.AVPlayer)
  func didDeleteClip(clip: VideoKitRecorder.VKRecorderClip)
  func didTapClip(clip: VideoKitRecorder.VKRecorderClip)
  func didTrimClip(clip: VideoKitRecorder.VKRecorderClip, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime)
  func didRearrangeClips(inSession session: VideoKitRecorder.VKRecorderSession)
}
@objc @_inheritsConvenienceInitializers public class VKEditorViewController : UIKit.UIViewController {
  public var delegate: VideoKitRecorder.VKEditorViewControllerDelegate?
  public var trimmer: VideoKitRecorder.VKTrimmerProtocol
  public var reorderText: Swift.String
  public var trimmingText: Swift.String
  final public let textLabel: UIKit.UILabel
  final public let bottomBorder: UIKit.UIView
  final public let abortButton: UIKit.UIButton
  final public let doneButton: UIKit.UIButton
  public var backgroundView: UIKit.UIView
  public var rearrangeView: VideoKitRecorder.VKRearrangeView
  public var trimmerView: VideoKitRecorder.VKTrimmerView
  public var playerView: UIKit.UIView
  public var trimmingPlayerView: UIKit.UIView
  public var videoLooper: VideoKitPlayer.VKVideoLooper?
  convenience public init(withSession session: VideoKitRecorder.VKRecorderSession)
  convenience public init(withVideoURLs urls: [Foundation.URL])
  convenience public init(withVideoURLs urls: [Swift.String])
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  public func editClip(clip: VideoKitRecorder.VKRecorderClip)
  public func playTrimPlayer()
  public func prepareAssetForTrimming(_ asset: AVFoundation.AVAsset)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension VKEditorViewController : VideoKitRecorder.VKRearrangeViewDelegate {
  public func tappedDeleteClip(clip: VideoKitRecorder.VKRecorderClip)
  public func tappedClip(clip: VideoKitRecorder.VKRecorderClip, hasBeenTrimmed: Swift.Bool, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime)
  public func clipsRearranged(clips: [VideoKitRecorder.VKRecorderClip])
}
extension VKEditorViewController : VideoKitRecorder.VKTrimmerViewDelegate {
  public func didAdjustTrimmerHandle(startTime start: Swift.Double, endTime end: Swift.Double, atPlayerTime playerTime: CoreMedia.CMTime)
  public func didFinishTrimming(startTime start: Swift.Double, endTime end: Swift.Double, atPlayerTime playerTime: CoreMedia.CMTime)
}
extension VKRecorderViewController {
  open func setupImages()
  public func hideAllControlsForRecordingMode()
  public func showAllControls()
}
public enum VKHorizontalPickerStyle {
  case wheel
  case flat
  public static func == (a: VideoKitRecorder.VKHorizontalPickerStyle, b: VideoKitRecorder.VKHorizontalPickerStyle) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public protocol VKHorizontalPickerDataSource {
  @objc func numberOfItemsInPickerView(_ pickerView: VideoKitRecorder.VKHorizontalPicker) -> Swift.Int
  @objc optional func pickerView(_ pickerView: VideoKitRecorder.VKHorizontalPicker, titleForItem item: Swift.Int) -> Swift.String
  @objc optional func pickerView(_ pickerView: VideoKitRecorder.VKHorizontalPicker, imageForItem item: Swift.Int) -> UIKit.UIImage
}
@objc public protocol VKHorizontalPickerDelegate : UIKit.UIScrollViewDelegate {
  @objc optional func pickerView(_ pickerView: VideoKitRecorder.VKHorizontalPicker, didSelectItem item: Swift.Int)
  @objc optional func pickerView(_ pickerView: VideoKitRecorder.VKHorizontalPicker, marginForItem item: Swift.Int) -> CoreGraphics.CGSize
  @objc optional func pickerView(_ pickerView: VideoKitRecorder.VKHorizontalPicker, configureLabel label: UIKit.UILabel, forItem item: Swift.Int)
}
@objc @_inheritsConvenienceInitializers public class VKHorizontalPicker : UIKit.UIView, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  weak public var dataSource: VideoKitRecorder.VKHorizontalPickerDataSource?
  weak public var delegate: VideoKitRecorder.VKHorizontalPickerDelegate? {
    get
    set
  }
  public var font: UIKit.UIFont {
    get
    set
  }
  public var highlightedFont: UIKit.UIFont {
    get
    set
  }
  @objc @IBInspectable public var textColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var highlightedTextColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var interitemSpacing: CoreGraphics.CGFloat
  public var pickerViewStyle: VideoKitRecorder.VKHorizontalPickerStyle
  @objc @IBInspectable public var viewDepth: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  public var maskDisabled: Swift.Bool! {
    get
    set
  }
  public var selectedItem: Swift.Int {
    get
  }
  public var contentOffset: CoreGraphics.CGPoint {
    get
  }
  @objc dynamic public init()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init!(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  public func reloadData()
  public func scrollToItem(_ item: Swift.Int, animated: Swift.Bool = false)
  public func selectItem(_ item: Swift.Int, animated: Swift.Bool = false)
  @objc public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @objc public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
public class VKVideoTrimmer : VideoKitRecorder.VKTrimmerProtocol {
  public var trimmingSuffix: Swift.String
  public var outputFileType: AVFoundation.AVFileType
  public var exportPreset: Swift.String
  public init(withOutputDirectory directory: Foundation.URL? = nil)
  public func trim(videoFile url: Foundation.URL, startTime start: Swift.Double, endTime end: Swift.Double, completion: (VideoKitRecorder.VKTrimmerCompletion)? = nil)
  @objc deinit
}
extension CMSampleBuffer {
  public func metadata() -> [Swift.String : Any]?
  public func append(metadataAdditions: [Swift.String : Any])
}
extension VKRecorderViewController : VideoKitRecorder.VKRecorderFlashAndTorchDelegate {
  public func vkRecorderDidChangeFlashMode(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderDidChangeTorchMode(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderFlashActiveChanged(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderTorchActiveChanged(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderFlashAndTorchAvailabilityChanged(_ vkRecorder: VideoKitRecorder.VKRecorder)
}
extension VKRecorderViewController {
  public func startRecordingSession(_ force: Swift.Bool = false)
  public func pauseRecordingSession()
  public func resetCapture()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VKAssetTimeSelector : UIKit.UIView, UIKit.UIScrollViewDelegate {
  public var asset: AVFoundation.AVAsset? {
    get
    set
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public func regenerateThumbnails()
  @objc deinit
}
extension VKRecorderViewController : VideoKitRecorder.VKRecorderVideoDelegate {
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didAppendVideoSampleBuffer sampleBuffer: CoreMedia.CMSampleBuffer, inSession session: VideoKitRecorder.VKRecorderSession)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didSkipVideoSampleBuffer sampleBuffer: CoreMedia.CMSampleBuffer, inSession session: VideoKitRecorder.VKRecorderSession)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didAppendVideoPixelBuffer pixelBuffer: CoreVideo.CVPixelBuffer, timestamp: Foundation.TimeInterval, inSession session: VideoKitRecorder.VKRecorderSession)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didCompleteSession session: VideoKitRecorder.VKRecorderSession)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didCompleteClip clip: VideoKitRecorder.VKRecorderClip, inSession session: VideoKitRecorder.VKRecorderSession)
}
extension NSNotification.Name {
  public static let VKVideoClipsWereMerged: Foundation.Notification.Name
}
extension VKRecorderViewController {
  @objc dynamic public func selectFromCameraRoll()
}
public let VKRecorderPhotoMetadataKey: Swift.String
public let VKRecorderPhotoJPEGKey: Swift.String
public let VKRecorderPhotoCroppedJPEGKey: Swift.String
public let VKRecorderPhotoRawImageKey: Swift.String
public let VKRecorderPhotoThumbnailKey: Swift.String
public protocol VKRecorderDelegate : AnyObject {
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didUpdateVideoConfiguration videoConfiguration: VideoKitRecorder.VKRecorderVideoConfiguration)
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didUpdateAudioConfiguration audioConfiguration: VideoKitRecorder.VKRecorderAudioConfiguration)
  func vkRecorderSessionWillStart(_ vkRecorder: VideoKitRecorder.VKRecorder)
  func vkRecorderSessionDidStart(_ vkRecorder: VideoKitRecorder.VKRecorder)
  func vkRecorderSessionDidStop(_ vkRecorder: VideoKitRecorder.VKRecorder)
  func vkRecorderDidFinishAutoMerge(_ url: Foundation.URL, _ session: VideoKitRecorder.VKRecorderSession)
  func vkRecorderDidFinishAutoMergeWithError(_ error: Swift.Error, _ session: VideoKitRecorder.VKRecorderSession)
  func vkRecorderDidFinishUploadWhileRecording(_ video: VideoKitCore.VKVideo, _ session: VideoKitRecorder.VKRecorderSession)
  func vkRecorderSessionWasInterrupted(_ vkRecorder: VideoKitRecorder.VKRecorder)
  func vkRecorderSessionInterruptionEnded(_ vkRecorder: VideoKitRecorder.VKRecorder)
  func vkRecorderCaptureModeWillChange(_ vkRecorder: VideoKitRecorder.VKRecorder)
  func vkRecorderCaptureModeDidChange(_ vkRecorder: VideoKitRecorder.VKRecorder)
}
extension VKRecorderDelegate {
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didUpdateVideoConfiguration videoConfiguration: VideoKitRecorder.VKRecorderVideoConfiguration)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didUpdateAudioConfiguration audioConfiguration: VideoKitRecorder.VKRecorderAudioConfiguration)
  public func vkRecorderSessionWillStart(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderSessionDidStart(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderSessionDidStop(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderDidFinishAutoMerge(_ url: Foundation.URL, _ session: VideoKitRecorder.VKRecorderSession)
  public func vkRecorderDidFinishAutoMergeWithError(_ error: Swift.Error, _ session: VideoKitRecorder.VKRecorderSession)
  public func vkRecorderSessionWasInterrupted(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderSessionInterruptionEnded(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderCaptureModeWillChange(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderCaptureModeDidChange(_ vkRecorder: VideoKitRecorder.VKRecorder)
}
public protocol VKRecorderPreviewDelegate : AnyObject {
  func vkRecorderWillStartPreview(_ vkRecorder: VideoKitRecorder.VKRecorder)
  func vkRecorderDidStopPreview(_ vkRecorder: VideoKitRecorder.VKRecorder)
}
extension VKRecorderPreviewDelegate {
  public func vkRecorderWillStartPreview(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderDidStopPreview(_ vkRecorder: VideoKitRecorder.VKRecorder)
}
public protocol VKRecorderDeviceDelegate : AnyObject {
  func vkRecorderDevicePositionWillChange(_ vkRecorder: VideoKitRecorder.VKRecorder)
  func vkRecorderDevicePositionDidChange(_ vkRecorder: VideoKitRecorder.VKRecorder)
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didChangeDeviceOrientation deviceOrientation: AVFoundation.AVCaptureVideoOrientation)
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didChangeDeviceFormat deviceFormat: AVFoundation.AVCaptureDevice.Format)
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didChangeCleanAperture cleanAperture: CoreGraphics.CGRect)
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didChangeLensPosition lensPosition: Swift.Float)
  func vkRecorderWillStartFocus(_ vkRecorder: VideoKitRecorder.VKRecorder)
  func vkRecorderDidStopFocus(_ vkRecorder: VideoKitRecorder.VKRecorder)
  func vkRecorderWillChangeExposure(_ vkRecorder: VideoKitRecorder.VKRecorder)
  func vkRecorderDidChangeExposure(_ vkRecorder: VideoKitRecorder.VKRecorder)
  func vkRecorderWillChangeWhiteBalance(_ vkRecorder: VideoKitRecorder.VKRecorder)
  func vkRecorderDidChangeWhiteBalance(_ vkRecorder: VideoKitRecorder.VKRecorder)
}
extension VKRecorderDeviceDelegate {
  public func vkRecorderDevicePositionWillChange(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderDevicePositionDidChange(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didChangeDeviceOrientation deviceOrientation: AVFoundation.AVCaptureVideoOrientation)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didChangeDeviceFormat deviceFormat: AVFoundation.AVCaptureDevice.Format)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didChangeCleanAperture cleanAperture: CoreGraphics.CGRect)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didChangeLensPosition lensPosition: Swift.Float)
  public func vkRecorderWillStartFocus(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderDidStopFocus(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderWillChangeExposure(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderDidChangeExposure(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderWillChangeWhiteBalance(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderDidChangeWhiteBalance(_ vkRecorder: VideoKitRecorder.VKRecorder)
}
public protocol VKRecorderFlashAndTorchDelegate : AnyObject {
  func vkRecorderDidChangeFlashMode(_ vkRecorder: VideoKitRecorder.VKRecorder)
  func vkRecorderDidChangeTorchMode(_ vkRecorder: VideoKitRecorder.VKRecorder)
  func vkRecorderFlashActiveChanged(_ vkRecorder: VideoKitRecorder.VKRecorder)
  func vkRecorderTorchActiveChanged(_ vkRecorder: VideoKitRecorder.VKRecorder)
  func vkRecorderFlashAndTorchAvailabilityChanged(_ vkRecorder: VideoKitRecorder.VKRecorder)
}
extension VKRecorderFlashAndTorchDelegate {
  public func vkRecorderDidChangeFlashMode(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderDidChangeTorchMode(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderFlashActiveChanged(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderTorchActiveChanged(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderFlashAndTorchAvailabilityChanged(_ vkRecorder: VideoKitRecorder.VKRecorder)
}
public protocol VKRecorderVideoDelegate : AnyObject {
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didUpdateVideoZoomFactor videoZoomFactor: Swift.Float)
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, willProcessRawVideoSampleBuffer sampleBuffer: CoreMedia.CMSampleBuffer, onQueue queue: Dispatch.DispatchQueue)
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, renderToCustomContextWithImageBuffer imageBuffer: CoreVideo.CVPixelBuffer, onQueue queue: Dispatch.DispatchQueue)
  @available(iOS 11.0, *)
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, willProcessFrame frame: Swift.AnyObject, pixelBuffer: CoreVideo.CVPixelBuffer, timestamp: Foundation.TimeInterval, onQueue queue: Dispatch.DispatchQueue)
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didSetupVideoInSession session: VideoKitRecorder.VKRecorderSession)
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didSetupAudioInSession session: VideoKitRecorder.VKRecorderSession)
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didStartClipInSession session: VideoKitRecorder.VKRecorderSession)
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didCompleteClip clip: VideoKitRecorder.VKRecorderClip, inSession session: VideoKitRecorder.VKRecorderSession)
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didAppendVideoSampleBuffer sampleBuffer: CoreMedia.CMSampleBuffer, inSession session: VideoKitRecorder.VKRecorderSession)
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didSkipVideoSampleBuffer sampleBuffer: CoreMedia.CMSampleBuffer, inSession session: VideoKitRecorder.VKRecorderSession)
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didAppendVideoPixelBuffer pixelBuffer: CoreVideo.CVPixelBuffer, timestamp: Foundation.TimeInterval, inSession session: VideoKitRecorder.VKRecorderSession)
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didSkipVideoPixelBuffer pixelBuffer: CoreVideo.CVPixelBuffer, timestamp: Foundation.TimeInterval, inSession session: VideoKitRecorder.VKRecorderSession)
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didAppendAudioSampleBuffer sampleBuffer: CoreMedia.CMSampleBuffer, inSession session: VideoKitRecorder.VKRecorderSession)
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didSkipAudioSampleBuffer sampleBuffer: CoreMedia.CMSampleBuffer, inSession session: VideoKitRecorder.VKRecorderSession)
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didCompleteSession session: VideoKitRecorder.VKRecorderSession)
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didCompletePhotoCaptureFromVideoFrame photoDict: [Swift.String : Any]?)
}
extension VKRecorderVideoDelegate {
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, willProcessFrame frame: Swift.AnyObject, pixelBuffer: CoreVideo.CVPixelBuffer, timestamp: Foundation.TimeInterval, onQueue queue: Dispatch.DispatchQueue)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didUpdateVideoZoomFactor videoZoomFactor: Swift.Float)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, willProcessRawVideoSampleBuffer sampleBuffer: CoreMedia.CMSampleBuffer, onQueue queue: Dispatch.DispatchQueue)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, willProcessFrame frame: Swift.AnyObject, timestamp: Foundation.TimeInterval, onQueue queue: Dispatch.DispatchQueue)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, renderToCustomContextWithImageBuffer imageBuffer: CoreVideo.CVPixelBuffer, onQueue queue: Dispatch.DispatchQueue)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didSetupVideoInSession session: VideoKitRecorder.VKRecorderSession)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didSetupAudioInSession session: VideoKitRecorder.VKRecorderSession)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didStartClipInSession session: VideoKitRecorder.VKRecorderSession)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didCompleteClip clip: VideoKitRecorder.VKRecorderClip, inSession session: VideoKitRecorder.VKRecorderSession)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didAppendVideoSampleBuffer sampleBuffer: CoreMedia.CMSampleBuffer, inSession session: VideoKitRecorder.VKRecorderSession)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didAppendAudioSampleBuffer sampleBuffer: CoreMedia.CMSampleBuffer, inSession session: VideoKitRecorder.VKRecorderSession)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didAppendVideoPixelBuffer pixelBuffer: CoreVideo.CVPixelBuffer, timestamp: Foundation.TimeInterval, inSession session: VideoKitRecorder.VKRecorderSession)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didSkipVideoPixelBuffer pixelBuffer: CoreVideo.CVPixelBuffer, timestamp: Foundation.TimeInterval, inSession session: VideoKitRecorder.VKRecorderSession)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didSkipVideoSampleBuffer sampleBuffer: CoreMedia.CMSampleBuffer, inSession session: VideoKitRecorder.VKRecorderSession)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didSkipAudioSampleBuffer sampleBuffer: CoreMedia.CMSampleBuffer, inSession session: VideoKitRecorder.VKRecorderSession)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didCompleteSession session: VideoKitRecorder.VKRecorderSession)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didCompletePhotoCaptureFromVideoFrame photoDict: [Swift.String : Any]?)
}
public protocol VKRecorderPhotoDelegate : AnyObject {
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, willCapturePhotoWithConfiguration photoConfiguration: VideoKitRecorder.VKRecorderPhotoConfiguration)
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didCapturePhotoWithConfiguration photoConfiguration: VideoKitRecorder.VKRecorderPhotoConfiguration)
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didProcessPhotoCaptureWith photoDict: [Swift.String : Any]?, photoConfiguration: VideoKitRecorder.VKRecorderPhotoConfiguration)
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didProcessRawPhotoCaptureWith photoDict: [Swift.String : Any]?, photoConfiguration: VideoKitRecorder.VKRecorderPhotoConfiguration)
  func vkRecorderDidCompletePhotoCapture(_ vkRecorder: VideoKitRecorder.VKRecorder)
  @available(iOS 11.0, *)
  func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didFinishProcessingPhoto photo: AVFoundation.AVCapturePhoto)
}
public protocol VKRecorderPortraitEffectsMatteDelegate : AnyObject {
  @available(iOS 12.0, *)
  func portraitEffectsMatteOutput(_ vkRecorder: VideoKitRecorder.VKRecorder, didOutput portraitEffectsMatte: AVFoundation.AVPortraitEffectsMatte)
}
public protocol VKRecorderMetadataOutputObjectsDelegate : AnyObject {
  func metadataOutputObjects(_ vkRecorder: VideoKitRecorder.VKRecorder, didOutput metadataObjects: [AVFoundation.AVMetadataObject])
}
extension VKRecorderViewController {
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidLayoutSubviews()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
}
@_hasMissingDesignatedInitializers @available(iOS 11.0, *)
public class VKRecorderBufferRenderer {
  public var videoBufferOutput: CoreVideo.CVPixelBuffer? {
    get
  }
  public var autoenablesDefaultLighting: Swift.Bool {
    get
    set
  }
  @objc deinit
}
@available(iOS 11.0, *)
extension VKRecorderBufferRenderer {
}
extension VKRecorderViewController : VideoKitRecorder.VKHorizontalPickerDataSource {
  @objc dynamic open func numberOfItemsInPickerView(_ pickerView: VideoKitRecorder.VKHorizontalPicker) -> Swift.Int
  @objc dynamic open func pickerView(_ pickerView: VideoKitRecorder.VKHorizontalPicker, titleForItem item: Swift.Int) -> Swift.String
}
@_inheritsConvenienceInitializers @objc public class VKRecorderConfiguration : ObjectiveC.NSObject {
  public enum VKAspectRatio : Swift.CustomStringConvertible {
    case active
    case square
    case standard
    case standardLandscape
    case widescreen
    case widescreenLandscape
    case twitter
    case youtube
    case tiktok
    case instagram
    case instagramLandscape
    case instagramStories
    case cinematic
    case custom(w: Swift.Int, h: Swift.Int)
    public var dimensions: CoreGraphics.CGSize? {
      get
    }
    public var ratio: CoreGraphics.CGFloat? {
      get
    }
    public var description: Swift.String {
      get
    }
  }
  public var preset: AVFoundation.AVCaptureSession.Preset
  public var options: [Swift.String : Any]?
  @objc override dynamic public init()
  public func avcaptureSettingsDictionary(sampleBuffer: CoreMedia.CMSampleBuffer? = nil, pixelBuffer: CoreVideo.CVPixelBuffer? = nil) -> [Swift.String : Any]?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class VKRecorderVideoConfiguration : VideoKitRecorder.VKRecorderConfiguration {
  public static let VideoBitRateDefault: Swift.Int
  public var bitRate: Swift.Int
  public var dimensions: CoreGraphics.CGSize?
  public var aspectRatio: VideoKitRecorder.VKRecorderConfiguration.VKAspectRatio
  public var transform: CoreGraphics.CGAffineTransform
  public var codec: AVFoundation.AVVideoCodecType
  public var profileLevel: Swift.String?
  public var scalingMode: Swift.String
  public var maxKeyFrameInterval: Swift.Int?
  public var timescale: Swift.Float64?
  public var maximumCaptureDuration: CoreMedia.CMTime?
  public var autoMergeClipsAfterRecording: Swift.Bool
  public var autoMergeAssetExportPreset: Swift.String
  public var uploadWhileRecording: Swift.Bool {
    get
    set
  }
  public var recordMultipleClips: Swift.Bool {
    get
    set
  }
  @objc override dynamic public init()
  override public func avcaptureSettingsDictionary(sampleBuffer: CoreMedia.CMSampleBuffer? = nil, pixelBuffer: CoreVideo.CVPixelBuffer? = nil) -> [Swift.String : Any]?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class VKRecorderAudioConfiguration : VideoKitRecorder.VKRecorderConfiguration {
  public static let AudioBitRateDefault: (Swift.Int)
  public static let AudioSampleRateDefault: Swift.Double
  public static let AudioChannelsCountDefault: Swift.Int
  public var bitRate: Swift.Int
  public var sampleRate: Swift.Float64?
  public var channelsCount: Swift.Int?
  public var format: CoreAudioTypes.AudioFormatID
  @objc override dynamic public init()
  override public func avcaptureSettingsDictionary(sampleBuffer: CoreMedia.CMSampleBuffer? = nil, pixelBuffer: CoreVideo.CVPixelBuffer? = nil) -> [Swift.String : Any]?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class VKRecorderPhotoConfiguration : VideoKitRecorder.VKRecorderConfiguration {
  public var codec: AVFoundation.AVVideoCodecType
  public var generateThumbnail: Swift.Bool
  public var isHighResolutionEnabled: Swift.Bool
  public var isPortraitEffectsMatteEnabled: Swift.Bool
  public var isRawCaptureEnabled: Swift.Bool
  public func avcaptureDictionary() -> [Swift.String : Any]?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class VKRecorderARConfiguration : VideoKitRecorder.VKRecorderConfiguration {
  @objc override dynamic public init()
  @objc deinit
}
extension VKRecorderViewController : VideoKitRecorder.VKImagePickerDelegate {
  public func didSelect(image: UIKit.UIImage?)
  public func didSelectVideo(url: Foundation.URL?)
}
public protocol VKTrimmerViewDelegate : AnyObject {
  func didAdjustTrimmerHandle(startTime start: Swift.Double, endTime end: Swift.Double, atPlayerTime playerTime: CoreMedia.CMTime)
  func didFinishTrimming(startTime start: Swift.Double, endTime end: Swift.Double, atPlayerTime playerTime: CoreMedia.CMTime)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable public class VKTrimmerView : VideoKitRecorder.VKAssetTimeSelector {
  public var clip: VideoKitRecorder.VKRecorderClip?
  @objc @IBInspectable public var borderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var trimHandleColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var trimHandleHighlightColor: UIKit.UIColor
  @objc @IBInspectable public var trimBorderHighlightColor: UIKit.UIColor
  @objc @IBInspectable public var borderRadius: CoreGraphics.CGFloat
  @objc @IBInspectable public var scrollerColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var maskColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  weak public var delegate: VideoKitRecorder.VKTrimmerViewDelegate?
  public var minDuration: Swift.Double
  public func seek(to time: CoreMedia.CMTime)
  public var startTime: CoreMedia.CMTime? {
    get
  }
  public var endTime: CoreMedia.CMTime? {
    get
  }
  @objc public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @objc public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public struct VKRecordingProgressTimeMarker {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VKRecordingProgressView : UIKit.UIProgressView {
  public var maxTime: Swift.Double
  public func removeLastMarker()
  public func addMarker(atTime time: Foundation.TimeInterval)
  @objc deinit
}
extension VKRecorderViewController : VideoKitRecorder.VKHorizontalPickerDelegate {
  @objc dynamic open func pickerView(_ pickerView: VideoKitRecorder.VKHorizontalPicker, didSelectItem item: Swift.Int)
}
public let VKRecorderClipFilenameKey: Swift.String
public let VKRecorderClipInfoDictKey: Swift.String
public protocol VKRecorderClipProtocol {
  var representationDict: [Swift.String : Any]? { get }
  var infoDict: [Swift.String : Any]? { get }
  var frameRate: Swift.Float { get }
  var lastFrameImage: VideoKitCore.VKImage? { get }
  var thumbnailImage: VideoKitCore.VKImage? { get }
  var duration: CoreMedia.CMTime { get }
  var asset: AVFoundation.AVAsset? { get }
  var fileExists: Swift.Bool { get }
  var url: Foundation.URL? { get set }
  var uuid: Foundation.UUID { get }
  func removeFile()
}
@_inheritsConvenienceInitializers @objc public class VKRecorderClip : ObjectiveC.NSObject, VideoKitRecorder.VKRecorderClipProtocol {
  public var uuid: Foundation.UUID {
    get
  }
  public var url: Foundation.URL? {
    get
    set
  }
  public var fileExists: Swift.Bool {
    get
  }
  public var asset: AVFoundation.AVAsset? {
    get
  }
  public var duration: CoreMedia.CMTime {
    get
  }
  public var isMutedOnMerge: Swift.Bool
  public var thumbnailImage: VideoKitCore.VKImage? {
    get
  }
  public var lastFrameImage: VideoKitCore.VKImage? {
    get
  }
  public var frameRate: Swift.Float {
    get
  }
  public var infoDict: [Swift.String : Any]? {
    get
  }
  public var representationDict: [Swift.String : Any]? {
    get
  }
  public class func clipURL(withFilename filename: Swift.String, directoryPath: Swift.String) -> Foundation.URL?
  public class func clip(withUrl url: Foundation.URL?, infoDict: [Swift.String : Any]?) -> VideoKitRecorder.VKRecorderClip
  convenience public init(withClip clip: VideoKitRecorder.VKRecorderClipProtocol)
  convenience public init(url: Foundation.URL?, infoDict: [Swift.String : Any]?)
  convenience public init(directoryPath: Swift.String, representationDict: [Swift.String : Any]?)
  @objc deinit
  public func removeFile()
  public func initialRevision() -> Foundation.URL?
  @objc override dynamic public init()
}
extension VKRecorderViewController : VideoKitRecorder.VKRecorderDeviceDelegate {
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didChangeLensPosition lensPosition: Swift.Float)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didChangeCleanAperture cleanAperture: CoreGraphics.CGRect)
  public func vkRecorderDevicePositionWillChange(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderDevicePositionDidChange(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didChangeDeviceOrientation deviceOrientation: AVFoundation.AVCaptureVideoOrientation)
  public func vkRecorder(_ vkRecorder: VideoKitRecorder.VKRecorder, didChangeDeviceFormat deviceFormat: AVFoundation.AVCaptureDevice.Format)
  public func vkRecorderDidStopFocus(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderDidChangeExposure(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderWillStartFocus(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderWillChangeExposure(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderWillChangeWhiteBalance(_ vkRecorder: VideoKitRecorder.VKRecorder)
  public func vkRecorderDidChangeWhiteBalance(_ vkRecorder: VideoKitRecorder.VKRecorder)
}
public protocol VKClipViewDelegate {
  func tappedDeleteClip(clip: VideoKitRecorder.VKRecorderClip)
}
@objc @_hasMissingDesignatedInitializers public class VKClipView : UIKit.UIButton {
  public var delegate: VideoKitRecorder.VKClipViewDelegate?
  public var clip: VideoKitRecorder.VKRecorderClip {
    get
    set
  }
  public var hasBeenTrimmed: Swift.Bool {
    get
    set
  }
  public var trimStart: CoreMedia.CMTime
  public var trimEnd: CoreMedia.CMTime
  public var deleteClipIcon: UIKit.UIButton
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
@_inheritsConvenienceInitializers @objc public class VKRecorderSession : ObjectiveC.NSObject {
  weak public var delegate: VideoKitRecorder.VKRecorderDelegate?
  public var outputDirectory: Swift.String
  public var fileType: AVFoundation.AVFileType
  public var fileExtension: Swift.String
  public var videoID: Foundation.UUID {
    get
  }
  public var date: Foundation.Date {
    get
  }
  public var state: VideoKitRecorder.VKRecorderSession.VKRecordingState
  public enum VKRecordingState {
    case paused
    case stopped
    case initialized
    case ready
    case writerStarting
    case writerWriting
    case writerStopping
    case writerStopped
    case notready
    case merging
    public static func == (a: VideoKitRecorder.VKRecorderSession.VKRecordingState, b: VideoKitRecorder.VKRecorderSession.VKRecordingState) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var url: Foundation.URL? {
    get
  }
  public var isVideoSetup: Swift.Bool {
    get
  }
  public var isVideoReady: Swift.Bool {
    get
  }
  public var isAudioSetup: Swift.Bool {
    get
  }
  public var isAudioReady: Swift.Bool {
    get
  }
  public var clips: [VideoKitRecorder.VKRecorderClip] {
    get
  }
  public var totalDuration: CoreMedia.CMTime {
    get
  }
  public var isWriterReady: Swift.Bool {
    get
  }
  public var currentClipHasStarted: Swift.Bool {
    get
  }
  public var currentClipDuration: CoreMedia.CMTime {
    get
  }
  public var currentClipHasVideo: Swift.Bool {
    get
  }
  public var currentClipHasAudio: Swift.Bool {
    get
  }
  public var asset: AVFoundation.AVAsset? {
    get
  }
  public var pixelBufferPool: CoreVideo.CVPixelBufferPool? {
    get
  }
  convenience public init(queue: Dispatch.DispatchQueue, queueKey: Dispatch.DispatchSpecificKey<()>)
  @objc override dynamic public init()
  @objc deinit
}
extension VKRecorderSession {
  public func setupVideo(withSettings settings: [Swift.String : Any]?, configuration: VideoKitRecorder.VKRecorderVideoConfiguration, formatDescription: CoreMedia.CMFormatDescription? = nil) -> Swift.Bool
  public func setupAudio(withSettings settings: [Swift.String : Any]?, configuration: VideoKitRecorder.VKRecorderAudioConfiguration, formatDescription: CoreMedia.CMFormatDescription) -> Swift.Bool
  public func reinitVideo()
}
extension VKRecorderSession {
  public typealias VKRecorderSessionAppendSampleBufferCompletionHandler = (Swift.Bool) -> Swift.Void
  public func updateLastVideoCaptureTime(forPixelBuffer pixelBuffer: CoreVideo.CVPixelBuffer, timestamp: Foundation.TimeInterval, minFrameDuration: CoreMedia.CMTime)
  public func updateLastVideoCaptureTime(forSampleBuffer sampleBuffer: CoreMedia.CMSampleBuffer)
  public func updateLastAudioCaptureTime(forSampleBuffer sampleBuffer: CoreMedia.CMSampleBuffer)
  public func appendVideo(withSampleBuffer sampleBuffer: CoreMedia.CMSampleBuffer, customImageBuffer: CoreVideo.CVPixelBuffer?, minFrameDuration: CoreMedia.CMTime, completionHandler: (Swift.Bool) -> Swift.Void)
  public func appendVideo(withPixelBuffer pixelBuffer: CoreVideo.CVPixelBuffer, customImageBuffer: CoreVideo.CVPixelBuffer?, timestamp: Foundation.TimeInterval, minFrameDuration: CoreMedia.CMTime, completionHandler: (Swift.Bool) -> Swift.Void)
  public func appendAudio(withSampleBuffer sampleBuffer: CoreMedia.CMSampleBuffer, completionHandler: @escaping VideoKitRecorder.VKRecorderSession.VKRecorderSessionAppendSampleBufferCompletionHandler)
  public func reset()
  public func finalizeUploadWhileRecording()
  public typealias VKRecorderSessionEndClipCompletionHandler = (VideoKitRecorder.VKRecorderClip?, Swift.Error?) -> Swift.Void
  public func beginClip()
  public func endClip(completionHandler: VideoKitRecorder.VKRecorderSession.VKRecorderSessionEndClipCompletionHandler?)
}
extension VKRecorderSession {
  public var lastClipUrl: Foundation.URL? {
    get
  }
  public func add(clip: VideoKitRecorder.VKRecorderClip)
  public func add(clip: VideoKitRecorder.VKRecorderClip, at idx: Swift.Int)
  public func setClips(clips: [VideoKitRecorder.VKRecorderClip])
  public func replace(clip: VideoKitRecorder.VKRecorderClip, atIndex index: Swift.Int)
  public func reposition(clip: VideoKitRecorder.VKRecorderClip, to indexTo: Swift.Int)
  public func reposition(fromIndex indexFrom: Swift.Int, to indexTo: Swift.Int)
  public func remove(clip: VideoKitRecorder.VKRecorderClip)
  public func remove(clipAt idx: Swift.Int, removeFile: Swift.Bool)
  public func removeAllClips(removeFiles: Swift.Bool = true)
  public func removeLastClip()
  public typealias VKRecorderSessionMergeClipsCompletionHandler = (Foundation.URL?, Swift.Error?) -> Swift.Void
  public func mergeClips(usingPreset preset: Swift.String, completionHandler: @escaping VideoKitRecorder.VKRecorderSession.VKRecorderSessionMergeClipsCompletionHandler)
}
public protocol VKRearrangeViewDelegate {
  func tappedClip(clip: VideoKitRecorder.VKRecorderClip, hasBeenTrimmed: Swift.Bool, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime)
  func tappedDeleteClip(clip: VideoKitRecorder.VKRecorderClip)
  func clipsRearranged(clips: [VideoKitRecorder.VKRecorderClip])
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VKRearrangeView : UIKit.UIView {
  public var delegate: VideoKitRecorder.VKRearrangeViewDelegate?
  public var session: VideoKitRecorder.VKRecorderSession? {
    get
    set
  }
  public func removeClip(clip: VideoKitRecorder.VKRecorderClip)
  @objc deinit
}
extension VKRearrangeView : VideoKitRecorder.VKClipViewDelegate {
  public func tappedDeleteClip(clip: VideoKitRecorder.VKRecorderClip)
}
extension VKRearrangeView : VideoKitRecorder.VKRearrangableStackViewDelegate {
  @objc dynamic public func stackViewDidReorderArrangedSubviews(_ stackView: VideoKitRecorder.VKRearrangableStackView, reorderedView: UIKit.UIView, fromIndex: Swift.Int, toIndex: Swift.Int)
}
extension VideoKitRecorder.VKRecorderAuthorizationStatus : Swift.Equatable {}
extension VideoKitRecorder.VKRecorderAuthorizationStatus : Swift.Hashable {}
extension VideoKitRecorder.VKRecorderAuthorizationStatus : Swift.RawRepresentable {}
extension VideoKitRecorder.VKRecorderDeviceType : Swift.Equatable {}
extension VideoKitRecorder.VKRecorderDeviceType : Swift.Hashable {}
extension VideoKitRecorder.VKRecorderDeviceType : Swift.RawRepresentable {}
extension VideoKitRecorder.VKRecorderCaptureMode : Swift.Equatable {}
extension VideoKitRecorder.VKRecorderCaptureMode : Swift.Hashable {}
extension VideoKitRecorder.VKRecorderCaptureMode : Swift.RawRepresentable {}
extension VideoKitRecorder.VKRecorderMirroringMode : Swift.Equatable {}
extension VideoKitRecorder.VKRecorderMirroringMode : Swift.Hashable {}
extension VideoKitRecorder.VKRecorderMirroringMode : Swift.RawRepresentable {}
extension VideoKitRecorder.VKRecorderError : Swift.Equatable {}
extension VideoKitRecorder.VKRecorderError : Swift.Hashable {}
extension VideoKitRecorder.VKHorizontalPickerStyle : Swift.Equatable {}
extension VideoKitRecorder.VKHorizontalPickerStyle : Swift.Hashable {}
extension VideoKitRecorder.VKRecorderSession.VKRecordingState : Swift.Equatable {}
extension VideoKitRecorder.VKRecorderSession.VKRecordingState : Swift.Hashable {}
